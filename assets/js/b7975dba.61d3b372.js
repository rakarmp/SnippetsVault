"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7371],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,g=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<i;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6961:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={},s="C++",l={unversionedId:"cplus_snippets",id:"cplus_snippets",title:"C++",description:"Hello World",source:"@site/docs/cplus_snippets.md",sourceDirName:".",slug:"/cplus_snippets",permalink:"/docs/cplus_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cplus_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Statistics",permalink:"/docs/R/r_statistics_snippets"},next:{title:"C",permalink:"/docs/csharp_snippets"}},o={},d=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables",id:"variables",level:3},{value:"if-else",id:"if-else",level:3},{value:"For loop",id:"for-loop",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Array access",id:"array-access",level:3},{value:"Functions",id:"functions",level:3},{value:"Function overloading",id:"function-overloading",level:3},{value:"Object oriented programming (OOP)",id:"object-oriented-programming-oop",level:3},{value:"Constructors and object initialization",id:"constructors-and-object-initialization",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Function templates",id:"function-templates",level:3},{value:"Exepction handling",id:"exepction-handling",level:3},{value:"File reading",id:"file-reading",level:3},{value:"File writing",id:"file-writing",level:3},{value:"Working with pointers",id:"working-with-pointers",level:3},{value:"Dynamic memory allocation (new and delete)",id:"dynamic-memory-allocation-new-and-delete",level:3},{value:"Standard template library (STL) vectors",id:"standard-template-library-stl-vectors",level:3},{value:"Vector operations (push_back and pop_back)",id:"vector-operations-push_back-and-pop_back",level:3},{value:"Vector iteration (for-each loop)",id:"vector-iteration-for-each-loop",level:3},{value:"Map(std::map)",id:"mapstdmap",level:3},{value:"Map acces and iteration",id:"map-acces-and-iteration",level:3},{value:"String manipulation",id:"string-manipulation",level:3},{value:"Sorting",id:"sorting",level:3},{value:"Lambda expressions (c++11+)",id:"lambda-expressions-c11",level:3},{value:"Multithreading (c++11+)",id:"multithreading-c11",level:3},{value:"Object Serialization (Cereal library)",id:"object-serialization-cereal-library",level:3},{value:"Object Deserialization (Cereal library)",id:"object-deserialization-cereal-library",level:3},{value:"Date and time (C++11+)",id:"date-and-time-c11",level:3},{value:"Regular expressions (std::regex)",id:"regular-expressions-stdregex",level:3},{value:"Working with sets (std::set)",id:"working-with-sets-stdset",level:3},{value:"Set operations (intersection)",id:"set-operations-intersection",level:3},{value:"Handling command-line arguments",id:"handling-command-line-arguments",level:3},{value:"Binary File Reading and Writing",id:"binary-file-reading-and-writing",level:3},{value:"Template metaprogramming",id:"template-metaprogramming",level:3},{value:"Smart pointers (std::shared_ptr)",id:"smart-pointers-stdshared_ptr",level:3},{value:"Working with Multidimensional Arrays",id:"working-with-multidimensional-arrays",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Lambda Expressions with Capture Lists (C++11+)",id:"lambda-expressions-with-capture-lists-c11",level:3},{value:"Using std::find",id:"using-stdfind",level:3},{value:"Custom iterators (begin and end)",id:"custom-iterators-begin-and-end",level:3},{value:"Using std::thread for Multithreading (C++11+)",id:"using-stdthread-for-multithreading-c11",level:3},{value:"Using std::mutex for Synchronization (C++11+)",id:"using-stdmutex-for-synchronization-c11",level:3},{value:"Smart Pointers (std::unique_ptr)",id:"smart-pointers-stdunique_ptr",level:3},{value:"Using the std::filesystem Library (C++17+)",id:"using-the-stdfilesystem-library-c17",level:3},{value:"Working with Variadic Templates (C++11+)",id:"working-with-variadic-templates-c11",level:3},{value:"Operator Overloading (e.g., + operator)",id:"operator-overloading-eg--operator",level:3},{value:"Creating and Using Custom Exceptions",id:"creating-and-using-custom-exceptions",level:3},{value:"Function pointers and callbacks",id:"function-pointers-and-callbacks",level:3},{value:"Template specialization",id:"template-specialization",level:3},{value:"Custom Deleters for std::shared_ptr",id:"custom-deleters-for-stdshared_ptr",level:3},{value:"Using std::async for Asynchronous Execution (C++11+)",id:"using-stdasync-for-asynchronous-execution-c11",level:3},{value:"Function Binders and std::bind (C++11+)",id:"function-binders-and-stdbind-c11",level:3},{value:"Using std::chrono for High-Resolution Time (C++11+)",id:"using-stdchrono-for-high-resolution-time-c11",level:3},{value:"Creating and Using Custom Hash Functions",id:"creating-and-using-custom-hash-functions",level:3},{value:"Using std::any for Type-Unsafe Values (C++17+)",id:"using-stdany-for-type-unsafe-values-c17",level:3},{value:"Function Pointers and std::function (C++11+)",id:"function-pointers-and-stdfunction-c11",level:3},{value:"Using the std::optional Type (C++17+)",id:"using-the-stdoptional-type-c17",level:3}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c"},"C++"),(0,r.kt)("h3",{id:"hello-world"},"Hello World"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'int age = 30;\nstd::string name = "John";\n')),(0,r.kt)("h3",{id:"if-else"},"if-else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'if (age >= 18) {\n    std::cout << "You are an adult." << std::endl;\n} else {\n    std::cout << "You are a minor." << std::endl;\n}\n')),(0,r.kt)("h3",{id:"for-loop"},"For loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"for (int i = 0; i < 5; i++) {\n    std::cout << i << std::endl;\n}\n")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int numbers[] = {1, 2, 3, 4, 5};\n")),(0,r.kt)("h3",{id:"array-access"},"Array access"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int firstNumber = numbers[0];\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int add(int a, int b) {\n    return a + b;\n}\n")),(0,r.kt)("h3",{id:"function-overloading"},"Function overloading"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int add(int a, int b) {\n    return a + b;\n}\n\ndouble add(double a, double b) {\n    return a + b;\n}\n")),(0,r.kt)("h3",{id:"object-oriented-programming-oop"},"Object oriented programming (OOP)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class Person {\npublic:\n    std::string name;\n    int age;\n    void greet() {\n        std::cout << "Hello, my name is " << name << "." << std::endl;\n    }\n};\n')),(0,r.kt)("h3",{id:"constructors-and-object-initialization"},"Constructors and object initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Person {\npublic:\n    std::string name;\n    int age;\n    Person(std::string n, int a) : name(n), age(a) {}\n};\n")),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Student : public Person {\npublic:\n    std::string school;\n};\n")),(0,r.kt)("h3",{id:"function-templates"},"Function templates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename T>\nT add(T a, T b) {\n    return a + b;\n}\n")),(0,r.kt)("h3",{id:"exepction-handling"},"Exepction handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'try {\n    int result = 10 / 0;\n} catch (const std::exception& e) {\n    std::cerr << "Error: " << e.what() << std::endl;\n}\n')),(0,r.kt)("h3",{id:"file-reading"},"File reading"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <fstream>\nstd::ifstream file("example.txt");\nstd::string content;\nif (file.is_open()) {\n    while (std::getline(file, content)) {\n        std::cout << content << std::endl;\n    }\n    file.close();\n}\n')),(0,r.kt)("h3",{id:"file-writing"},"File writing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <fstream>\nstd::ofstream file("output.txt");\nif (file.is_open()) {\n    file << "This is some text." << std::endl;\n    file.close();\n}\n')),(0,r.kt)("h3",{id:"working-with-pointers"},"Working with pointers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int number = 42;\nint* ptr = &number;\n")),(0,r.kt)("h3",{id:"dynamic-memory-allocation-new-and-delete"},"Dynamic memory allocation (new and delete)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int* dynamicArray = new int[10];\ndelete[] dynamicArray;\n")),(0,r.kt)("h3",{id:"standard-template-library-stl-vectors"},"Standard template library (STL) vectors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\nstd::vector<int> numbers = {1, 2, 3, 4, 5};\n")),(0,r.kt)("h3",{id:"vector-operations-push_back-and-pop_back"},"Vector operations (push_back and pop_back)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"numbers.push_back(6);\nnumbers.pop_back();\n")),(0,r.kt)("h3",{id:"vector-iteration-for-each-loop"},"Vector iteration (for-each loop)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"for (int num : numbers) {\n    std::cout << num << std::endl;\n}\n")),(0,r.kt)("h3",{id:"mapstdmap"},"Map(std::map)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <map>\nstd::map<std::string, int> scores;\nscores["Alice"] = 95;\n')),(0,r.kt)("h3",{id:"map-acces-and-iteration"},"Map acces and iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'for (const auto& pair : scores) {\n    std::cout << pair.first << ": " << pair.second << std::endl;\n}\n')),(0,r.kt)("h3",{id:"string-manipulation"},"String manipulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string text = "Hello, World!";\nstd::string substring = text.substr(0, 5);\n')),(0,r.kt)("h3",{id:"sorting"},"Sorting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\nstd::vector<int> numbers = {5, 2, 9, 1, 3};\nstd::sort(numbers.begin(), numbers.end());\n")),(0,r.kt)("h3",{id:"lambda-expressions-c11"},"Lambda expressions (c++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"auto add = [](int a, int b) -> int { return a + b; };\n")),(0,r.kt)("h3",{id:"multithreading-c11"},"Multithreading (c++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <thread>\nvoid threadFunction() {\n    // Thread logic here\n}\nstd::thread t(threadFunction);\n")),(0,r.kt)("h3",{id:"object-serialization-cereal-library"},"Object Serialization (Cereal library)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <cereal/archives/json.hpp>\n#include <fstream>\nstruct Person {\n    std::string name;\n    int age;\n    template <class Archive>\n    void serialize(Archive& archive) {\n        archive(name, age);\n    }\n};\nPerson person;\n{\n    std::ofstream os("person.json");\n    cereal::JSONOutputArchive archive(os);\n    archive(person);\n}\n')),(0,r.kt)("h3",{id:"object-deserialization-cereal-library"},"Object Deserialization (Cereal library)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <cereal/archives/json.hpp>\n#include <fstream>\nstruct Person {\n    std::string name;\n    int age;\n    template <class Archive>\n    void serialize(Archive& archive) {\n        archive(name, age);\n    }\n};\nPerson person;\n{\n    std::ifstream is("person.json");\n    cereal::JSONInputArchive archive(is);\n    archive(person);\n}\n')),(0,r.kt)("h3",{id:"date-and-time-c11"},"Date and time (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <chrono>\nauto currentTime = std::chrono::system_clock::now();\n")),(0,r.kt)("h3",{id:"regular-expressions-stdregex"},"Regular expressions (std::regex)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <regex>\nstd::string text = "My email is example@example.com.";\nstd::regex emailRegex(R"(\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b)");\nbool isEmail = std::regex_search(text, emailRegex);\n')),(0,r.kt)("h3",{id:"working-with-sets-stdset"},"Working with sets (std::set)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <set>\nstd::set<int> uniqueNumbers = {1, 2, 3, 4, 5};\n")),(0,r.kt)("h3",{id:"set-operations-intersection"},"Set operations (intersection)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::set<int> set1 = {1, 2, 3};\nstd::set<int> set2 = {2, 3, 4};\nstd::set<int> intersection;\nstd::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(),\n                      std::inserter(intersection, intersection.begin()));\n")),(0,r.kt)("h3",{id:"handling-command-line-arguments"},"Handling command-line arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int main(int argc, char* argv[]) {\n    if (argc > 1) {\n        std::string arg1 = argv[1];\n        // Process command-line arguments\n    }\n    return 0;\n}\n")),(0,r.kt)("h3",{id:"binary-file-reading-and-writing"},"Binary File Reading and Writing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <fstream>\nstruct Data {\n    int value;\n    double decimal;\n};\nData data = {42, 3.14159};\nstd::ofstream binaryFile("data.bin", std::ios::binary);\nbinaryFile.write(reinterpret_cast<const char*>(&data), sizeof(data));\nbinaryFile.close();\n')),(0,r.kt)("h3",{id:"template-metaprogramming"},"Template metaprogramming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <int N>\nstruct Factorial {\n    static constexpr int value = N * Factorial<N - 1>::value;\n};\ntemplate <>\nstruct Factorial<0> {\n    static constexpr int value = 1;\n};\n")),(0,r.kt)("h3",{id:"smart-pointers-stdshared_ptr"},"Smart pointers (std::shared_ptr)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <memory>\nstd::shared_ptr<int> shared = std::make_shared<int>(42);\n")),(0,r.kt)("h3",{id:"working-with-multidimensional-arrays"},"Working with Multidimensional Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n")),(0,r.kt)("h3",{id:"enumerations"},"Enumerations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class DaysOfWeek {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n};\n")),(0,r.kt)("h3",{id:"lambda-expressions-with-capture-lists-c11"},"Lambda Expressions with Capture Lists (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x = 5;\nauto func = [x](int y) { return x + y; };\nint result = func(10);\n")),(0,r.kt)("h3",{id:"using-stdfind"},"Using std::find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\nstd::vector<int> numbers = {1, 2, 3, 4, 5};\nauto it = std::find(numbers.begin(), numbers.end(), 3);\nif (it != numbers.end()) {\n    int index = std::distance(numbers.begin(), it);\n}\n")),(0,r.kt)("h3",{id:"custom-iterators-begin-and-end"},"Custom iterators (begin and end)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyContainer {\npublic:\n    int data[5] = {1, 2, 3, 4, 5};\n    int* begin() { return &data[0]; }\n    int* end() { return &data[5]; }\n};\n")),(0,r.kt)("h3",{id:"using-stdthread-for-multithreading-c11"},"Using std::thread for Multithreading (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <thread>\nvoid threadFunction() {\n    // Thread logic here\n}\nstd::thread t(threadFunction);\n")),(0,r.kt)("h3",{id:"using-stdmutex-for-synchronization-c11"},"Using std::mutex for Synchronization (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <thread>\n#include <mutex>\nstd::mutex mtx;\nvoid printMessage() {\n    std::lock_guard<std::mutex> lock(mtx);\n    std::cout << "Thread-safe message" << std::endl;\n}\n')),(0,r.kt)("h3",{id:"smart-pointers-stdunique_ptr"},"Smart Pointers (std::unique_ptr)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <memory>\nstd::unique_ptr<int> unique = std::make_unique<int>(42);\n")),(0,r.kt)("h3",{id:"using-the-stdfilesystem-library-c17"},"Using the std::filesystem Library (C++17+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <filesystem>\nnamespace fs = std::filesystem;\nfs::path filePath = fs::current_path() / "file.txt";\nif (fs::exists(filePath)) {\n    // File exists\n}\n')),(0,r.kt)("h3",{id:"working-with-variadic-templates-c11"},"Working with Variadic Templates (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename... Args>\nvoid print(Args... args) {\n    (std::cout << ... << args) << std::endl;\n}\n")),(0,r.kt)("h3",{id:"operator-overloading-eg--operator"},"Operator Overloading (e.g., + operator)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Complex {\npublic:\n    double real, imag;\n    Complex operator+(const Complex& other) {\n        Complex result;\n        result.real = real + other.real;\n        result.imag = imag + other.imag;\n        return result;\n    }\n};\n")),(0,r.kt)("h3",{id:"creating-and-using-custom-exceptions"},"Creating and Using Custom Exceptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class CustomException : public std::exception {\npublic:\n    const char* what() const noexcept override {\n        return "Custom exception occurred.";\n    }\n};\ntry {\n    throw CustomException();\n} catch (const CustomException& e) {\n    std::cerr << e.what() << std::endl;\n}\n')),(0,r.kt)("h3",{id:"function-pointers-and-callbacks"},"Function pointers and callbacks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nvoid callbackFunction() {\n    std::cout << "Callback function called." << std::endl;\n}\nvoid performOperation(void (*callback)()) {\n    callback();\n}\n')),(0,r.kt)("h3",{id:"template-specialization"},"Template specialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'template <typename T>\nstruct Printer {\n    void print(T value) {\n        std::cout << value << std::endl;\n    }\n};\ntemplate <>\nstruct Printer<std::string> {\n    void print(std::string value) {\n        std::cout << "String: " << value << std::endl;\n    }\n};\n')),(0,r.kt)("h3",{id:"custom-deleters-for-stdshared_ptr"},"Custom Deleters for std::shared_ptr"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'struct CustomDeleter {\n    void operator()(int* ptr) {\n        delete ptr;\n        std::cout << "Custom deleter called." << std::endl;\n    }\n};\nstd::shared_ptr<int> sharedWithCustomDeleter(new int(42), CustomDeleter());\n')),(0,r.kt)("h3",{id:"using-stdasync-for-asynchronous-execution-c11"},"Using std::async for Asynchronous Execution (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <future>\nint asyncFunction() {\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    return 42;\n}\nint main() {\n    std::future<int> result = std::async(std::launch::async, asyncFunction);\n    std::cout << "Waiting for async function..." << std::endl;\n    int value = result.get();\n    std::cout << "Async result: " << value << std::endl;\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"function-binders-and-stdbind-c11"},"Function Binders and std::bind (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <functional>\nvoid printMessage(const std::string& message) {\n    std::cout << message << std::endl;\n}\nint main() {\n    auto boundFunction = std::bind(printMessage, "Hello, bound function!");\n    boundFunction();\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"using-stdchrono-for-high-resolution-time-c11"},"Using std::chrono for High-Resolution Time (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <chrono>\nint main() {\n    auto start = std::chrono::high_resolution_clock::now();\n    // Perform some time-consuming operation\n    auto end = std::chrono::high_resolution_clock::now();\n    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\n    std::cout << "Operation took " << duration.count() << " milliseconds." << std::endl;\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"creating-and-using-custom-hash-functions"},"Creating and Using Custom Hash Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <unordered_map>\nstruct Point {\n    int x, y;\n};\nstruct PointHash {\n    std::size_t operator()(const Point& p) const {\n        return std::hash<int>()(p.x) ^ std::hash<int>()(p.y);\n    }\n};\nint main() {\n    std::unordered_map<Point, std::string, PointHash> pointMap;\n    Point p = {1, 2};\n    pointMap[p] = "A point";\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"using-stdany-for-type-unsafe-values-c17"},"Using std::any for Type-Unsafe Values (C++17+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <any>\nint main() {\n    std::any value = 42;\n    int result = std::any_cast<int>(value);\n    std::cout << "Value: " << result << std::endl;\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"function-pointers-and-stdfunction-c11"},"Function Pointers and std::function (C++11+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <functional>\nvoid sayHello() {\n    std::cout << "Hello, world!" << std::endl;\n}\nint main() {\n    std::function<void()> func = sayHello;\n    func();\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"using-the-stdoptional-type-c17"},"Using the std::optional Type (C++17+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <optional>\nstd::optional<int> divide(int a, int b) {\n    if (b != 0) {\n        return a / b;\n    } else {\n        return std::nullopt; // Indicates no value\n    }\n}\nint main() {\n    auto result = divide(10, 2);\n    if (result.has_value()) {\n        std::cout << "Result: " << result.value() << std::endl;\n    } else {\n        std::cout << "Division by zero." << std::endl;\n    }\n    return 0;\n}\n')))}u.isMDXComponent=!0}}]);