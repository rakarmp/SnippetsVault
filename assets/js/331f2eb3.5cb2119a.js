"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8458],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>g});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=n.createContext({}),i=function(e){var a=n.useContext(u),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=i(e.components);return n.createElement(u.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=i(t),p=l,g=m["".concat(u,".").concat(p)]||m[p]||d[p]||r;return t?n.createElement(g,o(o({ref:a},c),{},{components:t})):n.createElement(g,o({ref:a},c))}));function g(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var u in a)hasOwnProperty.call(a,u)&&(s[u]=a[u]);s.originalType=e,s[m]="string"==typeof e?e:l,o[1]=s;for(var i=2;i<r;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6841:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var n=t(7462),l=(t(7294),t(3905));const r={},o="SQL",s={unversionedId:"sql_snippets",id:"sql_snippets",title:"SQL",description:"Create a table",source:"@site/docs/sql_snippets.md",sourceDirName:".",slug:"/sql_snippets",permalink:"/docs/sql_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scala",permalink:"/docs/scala_snippets"},next:{title:"Swift",permalink:"/docs/swift_snippets"}},u={},i=[{value:"Create a table",id:"create-a-table",level:3},{value:"SELECT all rows from a table",id:"select-all-rows-from-a-table",level:3},{value:"SELECT specific columns from a table",id:"select-specific-columns-from-a-table",level:3},{value:"Filter rows using WHERE clause",id:"filter-rows-using-where-clause",level:3},{value:"Sort rows in ascending order",id:"sort-rows-in-ascending-order",level:3},{value:"Sort rows in descending order",id:"sort-rows-in-descending-order",level:3},{value:"LIMIT the number of results",id:"limit-the-number-of-results",level:3},{value:"Add a new row to a table",id:"add-a-new-row-to-a-table",level:3},{value:"Update the data in a table",id:"update-the-data-in-a-table",level:3},{value:"Delete a row from a table",id:"delete-a-row-from-a-table",level:3},{value:"COUNT the number of rows in a table",id:"count-the-number-of-rows-in-a-table",level:3},{value:"SUM values in a column",id:"sum-values-in-a-column",level:3},{value:"AVERAGE values in a column",id:"average-values-in-a-column",level:3},{value:"GROUP BY and aggregate functions",id:"group-by-and-aggregate-functions",level:3},{value:"JOIN two tables (INNER JOIN)",id:"join-two-tables-inner-join",level:3},{value:"LEFT JOIN",id:"left-join",level:3},{value:"RIGHT JOIN",id:"right-join",level:3},{value:"FULL OUTER JOIN",id:"full-outer-join",level:3},{value:"Add a new column to an existing table",id:"add-a-new-column-to-an-existing-table",level:3},{value:"Rename a table",id:"rename-a-table",level:3},{value:"Rename a column",id:"rename-a-column",level:3},{value:"Create an INDEX on a column",id:"create-an-index-on-a-column",level:3},{value:"Remove an INDEX",id:"remove-an-index",level:3},{value:"Retrieve unique values from a column",id:"retrieve-unique-values-from-a-column",level:3},{value:"Filter rows using multiple conditions (AND)",id:"filter-rows-using-multiple-conditions-and",level:3},{value:"Filter rows using multiple conditions (OR)",id:"filter-rows-using-multiple-conditions-or",level:3},{value:"Use wildcards in LIKE",id:"use-wildcards-in-like",level:3},{value:"Use a subquery WHERE clause",id:"use-a-subquery-where-clause",level:3},{value:"Calculate a new column with an expression",id:"calculate-a-new-column-with-an-expression",level:3},{value:"Retrieve the current date and time",id:"retrieve-the-current-date-and-time",level:3},{value:"Truncate a table (remove all rows)",id:"truncate-a-table-remove-all-rows",level:3},{value:"Case-insensitive search (using ILIKE in PostgreSQL)",id:"case-insensitive-search-using-ilike-in-postgresql",level:3},{value:"Calculate the difference between two dates",id:"calculate-the-difference-between-two-dates",level:3},{value:"Create a temporary table",id:"create-a-temporary-table",level:3},{value:"Generate random numbers",id:"generate-random-numbers",level:3},{value:"Convert data types (from string to integer)",id:"convert-data-types-from-string-to-integer",level:3},{value:"Use COALESCE to handle NULL values",id:"use-coalesce-to-handle-null-values",level:3},{value:"Use the having clause with GROUP BY",id:"use-the-having-clause-with-group-by",level:3},{value:"Retrieve the Nth highest (or lowest) value in a column",id:"retrieve-the-nth-highest-or-lowest-value-in-a-column",level:3},{value:"Export query result to a CSV file (in MySQL)",id:"export-query-result-to-a-csv-file-in-mysql",level:3},{value:"Create a VIEW",id:"create-a-view",level:3},{value:"Use a common table expression (CTE)",id:"use-a-common-table-expression-cte",level:3},{value:"Use a window function to calculate a running total",id:"use-a-window-function-to-calculate-a-running-total",level:3},{value:"Pivot data from rows to columns (e.g., using CASE)",id:"pivot-data-from-rows-to-columns-eg-using-case",level:3},{value:"Unpivot data from columns to rows (e.g., using UNION ALL)",id:"unpivot-data-from-columns-to-rows-eg-using-union-all",level:3},{value:"Use recursive CTEs for hierarchical data (e.g., organizational structure)",id:"use-recursive-ctes-for-hierarchical-data-eg-organizational-structure",level:3},{value:"Use the JSON functions to work with JSON data (e.g., PostgreSQL&#39;s JSONB functions)",id:"use-the-json-functions-to-work-with-json-data-eg-postgresqls-jsonb-functions",level:3},{value:"Perform a self-JOIN to find related records (e.g., finding employees who manage other employees)",id:"perform-a-self-join-to-find-related-records-eg-finding-employees-who-manage-other-employees",level:3},{value:"Use the LAG and LEAD window functions to access data from previous and subsequent rows",id:"use-the-lag-and-lead-window-functions-to-access-data-from-previous-and-subsequent-rows",level:3},{value:"Create a stored procedure",id:"create-a-stored-procedure",level:3},{value:"Use a trigger to automatically perform actions on data changes",id:"use-a-trigger-to-automatically-perform-actions-on-data-changes",level:3},{value:"Perform bulk INSERT operations using the INSERT INTO...VALUES syntax",id:"perform-bulk-insert-operations-using-the-insert-intovalues-syntax",level:3},{value:"Use the MERGE (or UPSERT) statement to perform INSERT, UPDATE, or DELETE in a single operation (specific syntax may vary by database system)",id:"use-the-merge-or-upsert-statement-to-perform-insert-update-or-delete-in-a-single-operation-specific-syntax-may-vary-by-database-system",level:3},{value:"Use the ROLLUP or CUBE clause for multi-dimensional aggregation",id:"use-the-rollup-or-cube-clause-for-multi-dimensional-aggregation",level:3},{value:"Calculate the percentile rank of a value in a column",id:"calculate-the-percentile-rank-of-a-value-in-a-column",level:3},{value:"Use window functions to calculate a moving average over a specified window size",id:"use-window-functions-to-calculate-a-moving-average-over-a-specified-window-size",level:3},{value:"Create and use a user-defined function (UDF)",id:"create-and-use-a-user-defined-function-udf",level:3},{value:"Use the FOR XML clause to generate XML output (SQL Server)",id:"use-the-for-xml-clause-to-generate-xml-output-sql-server",level:3},{value:"Perform a cross-join (Cartesian product) between two tables",id:"perform-a-cross-join-cartesian-product-between-two-tables",level:3},{value:"Use the HAVING clause with aggregate functions to filter grouped results",id:"use-the-having-clause-with-aggregate-functions-to-filter-grouped-results",level:3}],c={toc:i},m="wrapper";function d(e){let{components:a,...t}=e;return(0,l.kt)(m,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sql"},"SQL"),(0,l.kt)("h3",{id:"create-a-table"},"Create a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    column3 datatype,\n   ....\n);\n")),(0,l.kt)("h3",{id:"select-all-rows-from-a-table"},"SELECT all rows from a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name;\n")),(0,l.kt)("h3",{id:"select-specific-columns-from-a-table"},"SELECT specific columns from a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2 FROM table_name;\n")),(0,l.kt)("h3",{id:"filter-rows-using-where-clause"},"Filter rows using WHERE clause"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name WHERE column_name = value;\n")),(0,l.kt)("h3",{id:"sort-rows-in-ascending-order"},"Sort rows in ascending order"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name ORDER BY column_name ASC;\n")),(0,l.kt)("h3",{id:"sort-rows-in-descending-order"},"Sort rows in descending order"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name ORDER BY column_name DESC;\n")),(0,l.kt)("h3",{id:"limit-the-number-of-results"},"LIMIT the number of results"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name LIMIT 10;\n")),(0,l.kt)("h3",{id:"add-a-new-row-to-a-table"},"Add a new row to a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table_name (column1, column2) VALUES (value1, value2);\n")),(0,l.kt)("h3",{id:"update-the-data-in-a-table"},"Update the data in a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE table_name SET column1 = new_value WHERE column2 = condition;\n")),(0,l.kt)("h3",{id:"delete-a-row-from-a-table"},"Delete a row from a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM table_name WHERE column_name = value;\n")),(0,l.kt)("h3",{id:"count-the-number-of-rows-in-a-table"},"COUNT the number of rows in a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*) FROM table_name;\n")),(0,l.kt)("h3",{id:"sum-values-in-a-column"},"SUM values in a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SUM(column_name) FROM table_name;\n")),(0,l.kt)("h3",{id:"average-values-in-a-column"},"AVERAGE values in a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(column_name) FROM table_name;\n")),(0,l.kt)("h3",{id:"group-by-and-aggregate-functions"},"GROUP BY and aggregate functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, COUNT(column2) FROM table_name GROUP BY column1;\n")),(0,l.kt)("h3",{id:"join-two-tables-inner-join"},"JOIN two tables (INNER JOIN)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;\n")),(0,l.kt)("h3",{id:"left-join"},"LEFT JOIN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;\n")),(0,l.kt)("h3",{id:"right-join"},"RIGHT JOIN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;\n")),(0,l.kt)("h3",{id:"full-outer-join"},"FULL OUTER JOIN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;\n")),(0,l.kt)("h3",{id:"add-a-new-column-to-an-existing-table"},"Add a new column to an existing table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE table_name ADD column_name datatype;\n")),(0,l.kt)("h3",{id:"rename-a-table"},"Rename a table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE old_table_name RENAME TO new_table_name;\n")),(0,l.kt)("h3",{id:"rename-a-column"},"Rename a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;\n")),(0,l.kt)("h3",{id:"create-an-index-on-a-column"},"Create an INDEX on a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE INDEX index_name ON table_name (column_name);\n")),(0,l.kt)("h3",{id:"remove-an-index"},"Remove an INDEX"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"DROP INDEX index_name;\n")),(0,l.kt)("h3",{id:"retrieve-unique-values-from-a-column"},"Retrieve unique values from a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT column_name FROM table_name;\n")),(0,l.kt)("h3",{id:"filter-rows-using-multiple-conditions-and"},"Filter rows using multiple conditions (AND)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name WHERE condition1 AND condition2;\n")),(0,l.kt)("h3",{id:"filter-rows-using-multiple-conditions-or"},"Filter rows using multiple conditions (OR)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name WHERE condition1 OR condition2;\n")),(0,l.kt)("h3",{id:"use-wildcards-in-like"},"Use wildcards in LIKE"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name WHERE column_name LIKE 'pattern%';\n")),(0,l.kt)("h3",{id:"use-a-subquery-where-clause"},"Use a subquery WHERE clause"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name WHERE column_name IN (SELECT column_name FROM another_table);\n")),(0,l.kt)("h3",{id:"calculate-a-new-column-with-an-expression"},"Calculate a new column with an expression"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2, column1 + column2 AS sum FROM table_name;\n")),(0,l.kt)("h3",{id:"retrieve-the-current-date-and-time"},"Retrieve the current date and time"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CURRENT_TIMESTAMP;\n")),(0,l.kt)("h3",{id:"truncate-a-table-remove-all-rows"},"Truncate a table (remove all rows)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"TRUNCATE TABLE table_name;\n")),(0,l.kt)("h3",{id:"case-insensitive-search-using-ilike-in-postgresql"},"Case-insensitive search (using ILIKE in PostgreSQL)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table_name WHERE column_name ILIKE 'pattern%';\n")),(0,l.kt)("h3",{id:"calculate-the-difference-between-two-dates"},"Calculate the difference between two dates"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DATEDIFF(end_date, start_date) AS date_difference FROM table_name;\n")),(0,l.kt)("h3",{id:"create-a-temporary-table"},"Create a temporary table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TEMPORARY TABLE temp_table AS SELECT * FROM table_name;\n")),(0,l.kt)("h3",{id:"generate-random-numbers"},"Generate random numbers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT RAND() AS random_number;\n")),(0,l.kt)("h3",{id:"convert-data-types-from-string-to-integer"},"Convert data types (from string to integer)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST(column_name AS INT) FROM table_name;\n")),(0,l.kt)("h3",{id:"use-coalesce-to-handle-null-values"},"Use COALESCE to handle NULL values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COALESCE(column_name, default_value) FROM table_name;\n")),(0,l.kt)("h3",{id:"use-the-having-clause-with-group-by"},"Use the having clause with GROUP BY"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) > 1;\n")),(0,l.kt)("h3",{id:"retrieve-the-nth-highest-or-lowest-value-in-a-column"},"Retrieve the Nth highest (or lowest) value in a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT column_name FROM table_name ORDER BY column_name DESC LIMIT 1 OFFSET N-1;\n")),(0,l.kt)("h3",{id:"export-query-result-to-a-csv-file-in-mysql"},"Export query result to a CSV file (in MySQL)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * INTO OUTFILE 'file.csv' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' FROM table_name;\n")),(0,l.kt)("h3",{id:"create-a-view"},"Create a VIEW"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE VIEW view_name AS SELECT column1, column2 FROM table_name WHERE condition;\n")),(0,l.kt)("h3",{id:"use-a-common-table-expression-cte"},"Use a common table expression (CTE)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH cte_name AS (\n    SELECT * FROM table_name WHERE condition\n)\nSELECT * FROM cte_name;\n")),(0,l.kt)("h3",{id:"use-a-window-function-to-calculate-a-running-total"},"Use a window function to calculate a running total"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2, SUM(column2) OVER (ORDER BY column1) AS running_total FROM table_name;\n")),(0,l.kt)("h3",{id:"pivot-data-from-rows-to-columns-eg-using-case"},"Pivot data from rows to columns (e.g., using CASE)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    MAX(CASE WHEN category = 'A' THEN value END) AS A,\n    MAX(CASE WHEN category = 'B' THEN value END) AS B\nFROM table_name;\n")),(0,l.kt)("h3",{id:"unpivot-data-from-columns-to-rows-eg-using-union-all"},"Unpivot data from columns to rows (e.g., using UNION ALL)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 'A' AS category, A AS value FROM table_name\nUNION ALL\nSELECT 'B' AS category, B AS value FROM table_name;\n")),(0,l.kt)("h3",{id:"use-recursive-ctes-for-hierarchical-data-eg-organizational-structure"},"Use recursive CTEs for hierarchical data (e.g., organizational structure)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH RECURSIVE org_hierarchy AS (\n    SELECT id, name, manager_id FROM employees WHERE id = start_employee_id\n    UNION ALL\n    SELECT e.id, e.name, e.manager_id FROM employees e\n    INNER JOIN org_hierarchy h ON e.manager_id = h.id\n)\nSELECT * FROM org_hierarchy;\n")),(0,l.kt)("h3",{id:"use-the-json-functions-to-work-with-json-data-eg-postgresqls-jsonb-functions"},"Use the JSON functions to work with JSON data (e.g., PostgreSQL's JSONB functions)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT data->>'key' AS value FROM json_table WHERE data->>'key' = 'search_value';\n")),(0,l.kt)("h3",{id:"perform-a-self-join-to-find-related-records-eg-finding-employees-who-manage-other-employees"},"Perform a self-JOIN to find related records (e.g., finding employees who manage other employees)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT e1.name AS manager, e2.name AS employee\nFROM employees e1\nINNER JOIN employees e2 ON e1.id = e2.manager_id;\n")),(0,l.kt)("h3",{id:"use-the-lag-and-lead-window-functions-to-access-data-from-previous-and-subsequent-rows"},"Use the LAG and LEAD window functions to access data from previous and subsequent rows"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2, LAG(column2) OVER (ORDER BY column1) AS previous_value, LEAD(column2) OVER (ORDER BY column1) AS next_value\nFROM table_name;\n")),(0,l.kt)("h3",{id:"create-a-stored-procedure"},"Create a stored procedure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE PROCEDURE procedure_name\nAS\nBEGIN\n    -- SQL statements here\nEND;\n")),(0,l.kt)("h3",{id:"use-a-trigger-to-automatically-perform-actions-on-data-changes"},"Use a trigger to automatically perform actions on data changes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TRIGGER trigger_name\nAFTER INSERT ON table_name\nFOR EACH ROW\nBEGIN\n    -- SQL statements here\nEND;\n")),(0,l.kt)("h3",{id:"perform-bulk-insert-operations-using-the-insert-intovalues-syntax"},"Perform bulk INSERT operations using the INSERT INTO...VALUES syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table_name (column1, column2)\nVALUES (value1, value2), (value3, value4), (value5, value6);\n")),(0,l.kt)("h3",{id:"use-the-merge-or-upsert-statement-to-perform-insert-update-or-delete-in-a-single-operation-specific-syntax-may-vary-by-database-system"},"Use the MERGE (or UPSERT) statement to perform INSERT, UPDATE, or DELETE in a single operation (specific syntax may vary by database system)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"MERGE INTO target_table AS target\nUSING source_table AS source\nON target.id = source.id\nWHEN MATCHED THEN\n    UPDATE SET target.column1 = source.column1\nWHEN NOT MATCHED THEN\n    INSERT (column1, column2) VALUES (source.column1, source.column2);\n")),(0,l.kt)("h3",{id:"use-the-rollup-or-cube-clause-for-multi-dimensional-aggregation"},"Use the ROLLUP or CUBE clause for multi-dimensional aggregation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2, SUM(value) FROM table_name\nGROUP BY ROLLUP (column1, column2);\n")),(0,l.kt)("h3",{id:"calculate-the-percentile-rank-of-a-value-in-a-column"},"Calculate the percentile rank of a value in a column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2, PERCENT_RANK() OVER (ORDER BY column2) AS percentile_rank\nFROM table_name;\n")),(0,l.kt)("h3",{id:"use-window-functions-to-calculate-a-moving-average-over-a-specified-window-size"},"Use window functions to calculate a moving average over a specified window size"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2, AVG(column2) OVER (ORDER BY column1 ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS moving_avg\nFROM table_name;\n")),(0,l.kt)("h3",{id:"create-and-use-a-user-defined-function-udf"},"Create and use a user-defined function (UDF)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION custom_function(param1 datatype, param2 datatype) RETURNS return_datatype AS\nBEGIN\n    -- SQL statements here\nEND;\n")),(0,l.kt)("h3",{id:"use-the-for-xml-clause-to-generate-xml-output-sql-server"},"Use the FOR XML clause to generate XML output (SQL Server)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column1, column2\nFROM table_name\nFOR XML AUTO, ROOT('root_element');\n")),(0,l.kt)("h3",{id:"perform-a-cross-join-cartesian-product-between-two-tables"},"Perform a cross-join (Cartesian product) between two tables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table1 CROSS JOIN table2;\n")),(0,l.kt)("h3",{id:"use-the-having-clause-with-aggregate-functions-to-filter-grouped-results"},"Use the HAVING clause with aggregate functions to filter grouped results"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT category, AVG(value) AS avg_value\nFROM table_name\nGROUP BY category\nHAVING AVG(value) > 50;\n")))}d.isMDXComponent=!0}}]);