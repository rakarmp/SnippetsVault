"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8273],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>v});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=n.createContext({}),c=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},u=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),d=l,v=p["".concat(o,".").concat(d)]||p[d]||m[d]||r;return t?n.createElement(v,s(s({ref:a},u),{},{components:t})):n.createElement(v,s({ref:a},u))}));function v(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,s=new Array(r);s[0]=d;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[p]="string"==typeof e?e:l,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2403:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=t(7462),l=(t(7294),t(3905));const r={},s="Scala",i={unversionedId:"scala_snippets",id:"scala_snippets",title:"Scala",description:"Hello World",source:"@site/docs/scala_snippets.md",sourceDirName:".",slug:"/scala_snippets",permalink:"/SnippetsVault/docs/scala_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scala_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rust",permalink:"/SnippetsVault/docs/rust_snippets"},next:{title:"SQL",permalink:"/SnippetsVault/docs/sql_snippets"}},o={},c=[{value:"Hello World",id:"hello-world",level:3},{value:"Variable declaration",id:"variable-declaration",level:3},{value:"Basic data types",id:"basic-data-types",level:3},{value:"String interpolation",id:"string-interpolation",level:3},{value:"Conditional statements",id:"conditional-statements",level:3},{value:"Pattern Matching (Similar to Switch)",id:"pattern-matching-similar-to-switch",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Function declaration",id:"function-declaration",level:3},{value:"Anonymous function",id:"anonymous-function",level:3},{value:"lists",id:"lists",level:3},{value:"Maps",id:"maps",level:3},{value:"Option for handling nulls",id:"option-for-handling-nulls",level:3},{value:"Class declaration",id:"class-declaration",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Trait (Similar to Interface)",id:"trait-similar-to-interface",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Try-catch",id:"try-catch",level:3},{value:"File IO",id:"file-io",level:3},{value:"Case classes (Immutable data structures)",id:"case-classes-immutable-data-structures",level:3},{value:"Option and match for safe value retrieval",id:"option-and-match-for-safe-value-retrieval",level:3},{value:"Filter List",id:"filter-list",level:3},{value:"Map List",id:"map-list",level:3},{value:"Sort List",id:"sort-list",level:3},{value:"String operations",id:"string-operations",level:3},{value:"Regular expressions",id:"regular-expressions",level:3},{value:"Date and Time (using java.time)",id:"date-and-time-using-javatime",level:3},{value:"Random numbers",id:"random-numbers",level:3},{value:"Multiline strings",id:"multiline-strings",level:3},{value:"Break and Continue (Not Natively Supported)",id:"break-and-continue-not-natively-supported",level:3},{value:"Collections operations (e.g., sum)",id:"collections-operations-eg-sum",level:3},{value:"read from console",id:"read-from-console",level:3},{value:"Type casting (AsInstanceOf)",id:"type-casting-asinstanceof",level:3},{value:"Elivs operator (not natively supported)",id:"elivs-operator-not-natively-supported",level:3},{value:"Custom control structures",id:"custom-control-structures",level:3},{value:"Exception handling with resources (Try-With-Resources)",id:"exception-handling-with-resources-try-with-resources",level:3},{value:"Futures and async programming",id:"futures-and-async-programming",level:3},{value:"Pattern matching with case classes",id:"pattern-matching-with-case-classes",level:3},{value:"Type parameters and generics",id:"type-parameters-and-generics",level:3},{value:"Implicits (Advanced Feature for Implicit Conversions)",id:"implicits-advanced-feature-for-implicit-conversions",level:3}],u={toc:c},p="wrapper";function m(e){let{components:a,...t}=e;return(0,l.kt)(p,(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"scala"},"Scala"),(0,l.kt)("h3",{id:"hello-world"},"Hello World"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object HelloWorld extends App {\n  println("Hello, World!")\n}\n')),(0,l.kt)("h3",{id:"variable-declaration"},"Variable declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val pi = 3.14159\nvar count = 0\n")),(0,l.kt)("h3",{id:"basic-data-types"},"Basic data types"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val num: Int = 42\nval name: String = "John"\nval isTrue: Boolean = true\n')),(0,l.kt)("h3",{id:"string-interpolation"},"String interpolation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val name = "Alice"\nprintln(s"Hello, $name!")\n')),(0,l.kt)("h3",{id:"conditional-statements"},"Conditional statements"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val age = 18\nif (age >= 18) {\n  println("You\'re an adult.")\n} else {\n  println("You\'re a minor.")\n}\n')),(0,l.kt)("h3",{id:"pattern-matching-similar-to-switch"},"Pattern Matching (Similar to Switch)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val day = 2\nday match {\n  case 1 => println("Monday")\n  case 2 => println("Tuesday")\n  case _ => println("Other day")\n}\n')),(0,l.kt)("h3",{id:"for-loop"},"For loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"for (i <- 1 to 5) {\n  println(i)\n}\n")),(0,l.kt)("h3",{id:"while-loop"},"While loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"var i = 0\nwhile (i < 5) {\n  println(i)\n  i += 1\n}\n")),(0,l.kt)("h3",{id:"function-declaration"},"Function declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"def add(a: Int, b: Int): Int = {\n  a + b\n}\n")),(0,l.kt)("h3",{id:"anonymous-function"},"Anonymous function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val multiply = (a: Int, b: Int) => a * b\nval result = multiply(5, 3)\n")),(0,l.kt)("h3",{id:"lists"},"lists"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val fruits = List("apple", "banana", "cherry")\nval firstFruit = fruits.head\n')),(0,l.kt)("h3",{id:"maps"},"Maps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val scores = Map("Alice" -> 95, "Bob" -> 85, "Carol" -> 90)\nval aliceScore = scores("Alice")\n')),(0,l.kt)("h3",{id:"option-for-handling-nulls"},"Option for handling nulls"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val maybeName: Option[String] = Some("Alice")\nval length = maybeName.getOrElse("").length\n')),(0,l.kt)("h3",{id:"class-declaration"},"Class declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'class Person(val name: String, var age: Int)\nval person = new Person("John", 30)\n')),(0,l.kt)("h3",{id:"inheritance"},"Inheritance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"class Animal(val name: String)\nclass Dog(name: String, val breed: String) extends Animal(name)\n")),(0,l.kt)("h3",{id:"trait-similar-to-interface"},"Trait (Similar to Interface)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"trait Shape {\n  def area(): Double\n}\n")),(0,l.kt)("h3",{id:"enumerations"},"Enumerations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"}," object Color extends Enumeration {\n  val RED, GREEN, BLUE = Value\n}\nval selectedColor = Color.RED\n")),(0,l.kt)("h3",{id:"try-catch"},"Try-catch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"try {\n  // Code that may throw an exception\n} catch {\n  case e: Exception => // Handle the exception\n}\n")),(0,l.kt)("h3",{id:"file-io"},"File IO"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val text = scala.io.Source.fromFile("data.txt").mkString\nimport java.io._\nval writer = new PrintWriter(new File("output.txt"))\nwriter.write("Hello, World!")\nwriter.close()\n')),(0,l.kt)("h3",{id:"case-classes-immutable-data-structures"},"Case classes (Immutable data structures)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"case class Point(x: Int, y: Int)\nval point1 = Point(1, 2)\nval point2 = Point(1, 2)\nval areEqual = point1 == point2 // true\n")),(0,l.kt)("h3",{id:"option-and-match-for-safe-value-retrieval"},"Option and match for safe value retrieval"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val maybeValue: Option[Int] = Some(42)\nval result = maybeValue match {\n  case Some(value) => value\n  case None => 0\n}\n")),(0,l.kt)("h3",{id:"filter-list"},"Filter List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val numbers = List(1, 2, 3, 4, 5)\nval evenNumbers = numbers.filter(_ % 2 == 0)\n")),(0,l.kt)("h3",{id:"map-list"},"Map List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val numbers = List(1, 2, 3, 4, 5)\nval squaredNumbers = numbers.map(x => x * x)\n")),(0,l.kt)("h3",{id:"sort-list"},"Sort List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val names = List("Alice", "Bob", "Carol")\nval sortedNames = names.sorted\n')),(0,l.kt)("h3",{id:"string-operations"},"String operations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val text = "Scala is awesome"\nval upperCaseText = text.toUpperCase\nval words = text.split(" ")\n')),(0,l.kt)("h3",{id:"regular-expressions"},"Regular expressions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val regex = """\\d+""".r\nval matchResult = regex.findFirstIn("Age: 30")\n')),(0,l.kt)("h3",{id:"date-and-time-using-javatime"},"Date and Time (using java.time)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import java.time._\nval currentDate = LocalDate.now\n")),(0,l.kt)("h3",{id:"random-numbers"},"Random numbers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import scala.util.Random\nval random = Random.nextInt(10)\n")),(0,l.kt)("h3",{id:"multiline-strings"},"Multiline strings"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val multilineText =\n  """\n    This is a\n    multiline string.\n  """\n')),(0,l.kt)("h3",{id:"break-and-continue-not-natively-supported"},"Break and Continue (Not Natively Supported)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// Use custom breakable and continue constructs\nimport util.control.Breaks._\n\nbreakable {\n  for (i <- 1 to 10) {\n    if (i == 5) break\n    println(i)\n  }\n}\n")),(0,l.kt)("h3",{id:"collections-operations-eg-sum"},"Collections operations (e.g., sum)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val numbers = List(1, 2, 3, 4, 5)\nval sum = numbers.sum\n")),(0,l.kt)("h3",{id:"read-from-console"},"read from console"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val input = scala.io.StdIn.readLine()\n")),(0,l.kt)("h3",{id:"type-casting-asinstanceof"},"Type casting (AsInstanceOf)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val anyValue: Any = 42\nval intValue = anyValue.asInstanceOf[Int]\n")),(0,l.kt)("h3",{id:"elivs-operator-not-natively-supported"},"Elivs operator (not natively supported)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"// Use Option to emulate Elvis operator\nval result = Option(maybeValue).getOrElse(0)\n")),(0,l.kt)("h3",{id:"custom-control-structures"},"Custom control structures"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def customLoop(n: Int)(body: => Unit): Unit = {\n  var i = 0\n  while (i < n) {\n    body\n    i += 1\n  }\n}\n\ncustomLoop(5) {\n  println("Custom loop iteration")\n}\n')),(0,l.kt)("h3",{id:"exception-handling-with-resources-try-with-resources"},"Exception handling with resources (Try-With-Resources)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.util.Using\nimport java.io._\n\nUsing(new PrintWriter(new File("output.txt"))) { writer =>\n  writer.write("Hello, World!")\n}\n')),(0,l.kt)("h3",{id:"futures-and-async-programming"},"Futures and async programming"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.concurrent.Future\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nval futureResult: Future[Int] = Future {\n  // Perform asynchronous operation\n  42\n}\n\nfutureResult.onComplete {\n  case scala.util.Success(result) => println(s"Result: $result")\n  case scala.util.Failure(exception) => println(s"Error: $exception")\n}\n')),(0,l.kt)("h3",{id:"pattern-matching-with-case-classes"},"Pattern matching with case classes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'case class Message(sender: String, content: String)\nval message = Message("Alice", "Hello, Bob!")\nmessage match {\n  case Message("Alice", _) => println("Received message from Alice")\n  case Message(_, _) => println("Received message from someone else")\n}\n')),(0,l.kt)("h3",{id:"type-parameters-and-generics"},"Type parameters and generics"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"class Box[T](value: T) {\n  def getValue: T = value\n}\n\nval intBox = new Box(42)\nval stringValue = intBox.getValue.toString\n")),(0,l.kt)("h3",{id:"implicits-advanced-feature-for-implicit-conversions"},"Implicits (Advanced Feature for Implicit Conversions)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"implicit def intToString(i: Int): String = i.toString\nval str: String = 42 // Converts int to string implicitly\n")))}m.isMDXComponent=!0}}]);