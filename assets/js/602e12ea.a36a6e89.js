"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8024],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,g=p["".concat(o,".").concat(m)]||p[m]||d[m]||l;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2799:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const l={},i="Swift",s={unversionedId:"swift_snippets",id:"swift_snippets",title:"Swift",description:"Hello World",source:"@site/docs/swift_snippets.md",sourceDirName:".",slug:"/swift_snippets",permalink:"/docs/swift_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/swift_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL",permalink:"/docs/sql_snippets"},next:{title:"TypeScript",permalink:"/docs/typescript_snippets"}},o={},c=[{value:"Hello World",id:"hello-world",level:3},{value:"Variabels and Constants",id:"variabels-and-constants",level:3},{value:"Type inference",id:"type-inference",level:3},{value:"Type annotation",id:"type-annotation",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Conditional statements",id:"conditional-statements",level:3},{value:"For-in",id:"for-in",level:3},{value:"While",id:"while",level:3},{value:"Functions",id:"functions",level:3},{value:"Optional binding",id:"optional-binding",level:3},{value:"Guard statement",id:"guard-statement",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Structs",id:"structs",level:3},{value:"Classes",id:"classes",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Protocols",id:"protocols",level:3},{value:"Extensions",id:"extensions",level:3},{value:"Closures",id:"closures",level:3},{value:"Optionals",id:"optionals",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Type casting",id:"type-casting",level:3},{value:"Deinitialization",id:"deinitialization",level:3},{value:"Acces control",id:"acces-control",level:3},{value:"Property observers",id:"property-observers",level:3},{value:"Computed properties",id:"computed-properties",level:3},{value:"Lazy properties",id:"lazy-properties",level:3},{value:"Equatable and Comparable",id:"equatable-and-comparable",level:3},{value:"Codable",id:"codable",level:3},{value:"Date formatting",id:"date-formatting",level:3},{value:"NotificationCenter",id:"notificationcenter",level:3},{value:"Dispatch queues",id:"dispatch-queues",level:3},{value:"User Defaults",id:"user-defaults",level:3},{value:"File Manager",id:"file-manager",level:3},{value:"Core Data",id:"core-data",level:3},{value:"UIAlertController",id:"uialertcontroller",level:3},{value:"Segues (Storyboard)",id:"segues-storyboard",level:3},{value:"Gesture Recognizers",id:"gesture-recognizers",level:3},{value:"Core Location (Location Services)",id:"core-location-location-services",level:3},{value:"Generics",id:"generics",level:3},{value:"Higher-order functions-map",id:"higher-order-functions-map",level:3},{value:"Higher-order functions-filter",id:"higher-order-functions-filter",level:3},{value:"Higher-order functions-reduce",id:"higher-order-functions-reduce",level:3},{value:"Async/Await (iOS 15+)",id:"asyncawait-ios-15",level:3},{value:"Result Type (Error Handling)",id:"result-type-error-handling",level:3},{value:"Custom operators",id:"custom-operators",level:3},{value:"Key-Value Observing (KVO)",id:"key-value-observing-kvo",level:3},{value:"Codable with Custom Keys",id:"codable-with-custom-keys",level:3},{value:"Core animation",id:"core-animation",level:3},{value:"Concurrency with DispatchGroup",id:"concurrency-with-dispatchgroup",level:3},{value:"Core graphics drawing",id:"core-graphics-drawing",level:3},{value:"Autolayout Programmatically",id:"autolayout-programmatically",level:3},{value:"Core Data Relationships",id:"core-data-relationships",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Swift Package Manager",id:"swift-package-manager",level:3},{value:"Keychain Access",id:"keychain-access",level:3},{value:"Unit Testing with XCTest",id:"unit-testing-with-xctest",level:3},{value:"Custom Property Wrappers",id:"custom-property-wrappers",level:3},{value:"SwiftUI",id:"swiftui",level:3}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"swift"},"Swift"),(0,r.kt)("h3",{id:"hello-world"},"Hello World"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'print("Hello, World!")\n')),(0,r.kt)("h3",{id:"variabels-and-constants"},"Variabels and Constants"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let constantValue = 10\nvar variableValue = 5\n")),(0,r.kt)("h3",{id:"type-inference"},"Type inference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let myString = "Hello, Swift!" // Inferred as String\n')),(0,r.kt)("h3",{id:"type-annotation"},"Type annotation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let age: Int = 30\n")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var fruits = ["Apple", "Banana", "Orange"]\nfruits.append("Mango")\n')),(0,r.kt)("h3",{id:"dictionaries"},"Dictionaries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var person = ["name": "John", "age": 25]\nperson["city"] = "New York"\n')),(0,r.kt)("h3",{id:"conditional-statements"},"Conditional statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'if age >= 18 {\n    print("You are an adult.")\n} else {\n    print("You are a minor.")\n}\n')),(0,r.kt)("h3",{id:"for-in"},"For-in"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"for number in 1...5 {\n    print(number)\n}\n")),(0,r.kt)("h3",{id:"while"},"While"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var count = 0\nwhile count < 5 {\n    print(count)\n    count += 1\n}\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'func greet(name: String) -> String {\n    return "Hello, \\(name)!"\n}\n')),(0,r.kt)("h3",{id:"optional-binding"},"Optional binding"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var optionalValue: Int? = 42\nif let value = optionalValue {\n    print("Value is \\(value)")\n} else {\n    print("Value is nil")\n}\n')),(0,r.kt)("h3",{id:"guard-statement"},"Guard statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'func checkAge(age: Int?) {\n    guard let age = age else {\n        print("Age is nil")\n        return\n    }\n    print("Age is \\(age)")\n}\n')),(0,r.kt)("h3",{id:"enumerations"},"Enumerations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"enum CompassDirection {\n    case north, south, east, west\n}\nlet direction = CompassDirection.north\n")),(0,r.kt)("h3",{id:"structs"},"Structs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"struct Point {\n    var x: Double\n    var y: Double\n}\nlet origin = Point(x: 0.0, y: 0.0)\n")),(0,r.kt)("h3",{id:"classes"},"Classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class Person {\n    var name: String = ""\n    var age: Int = 0\n}\nlet person = Person()\nperson.name = "Alice"\nperson.age = 30\n')),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class Student: Person {\n    var studentID: String = ""\n}\nlet student = Student()\nstudent.studentID = "12345"\n')),(0,r.kt)("h3",{id:"protocols"},"Protocols"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"protocol Animal {\n    func makeSound()\n}\n")),(0,r.kt)("h3",{id:"extensions"},"Extensions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'extension String {\n    func capitalize() -> String {\n        return self.capitalized\n    }\n}\nlet capitalizedString = "hello".capitalize()\n')),(0,r.kt)("h3",{id:"closures"},"Closures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let addNumbers: (Int, Int) -> Int = { (a, b) in\n    return a + b\n}\nlet result = addNumbers(5, 3)\n")),(0,r.kt)("h3",{id:"optionals"},"Optionals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var name: String? = "John"\nif let unwrappedName = name {\n    print("Hello, \\(unwrappedName)!")\n} else {\n    print("Name is nil")\n}\n')),(0,r.kt)("h3",{id:"error-handling"},"Error Handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'enum MyError: Error {\n    case someError\n}\n\nfunc throwError() throws {\n    throw MyError.someError\n}\n\ndo {\n    try throwError()\n} catch {\n    print("An error occurred: \\(error)")\n}\n')),(0,r.kt)("h3",{id:"tuples"},"Tuples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let personInfo = (name: "Alice", age: 25)\nprint(personInfo.name)\nprint(personInfo.age)\n')),(0,r.kt)("h3",{id:"type-casting"},"Type casting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class Animal {}\nclass Dog: Animal {}\n\nlet myDog = Dog()\nif myDog is Animal {\n    print("It\'s an animal")\n}\n')),(0,r.kt)("h3",{id:"deinitialization"},"Deinitialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class MyClass {\n    deinit {\n        print("Object deallocated")\n    }\n}\nvar object: MyClass? = MyClass()\nobject = nil // Deinitialization message printed\n')),(0,r.kt)("h3",{id:"acces-control"},"Acces control"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"public class MyPublicClass {}\ninternal class MyInternalClass {}\nprivate class MyPrivateClass {}\n")),(0,r.kt)("h3",{id:"property-observers"},"Property observers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'var temperature: Double = 0.0 {\n    didSet {\n        print("Temperature is now \\(temperature) degrees.")\n    }\n}\ntemperature = 25.0 // Prints the observer message\n')),(0,r.kt)("h3",{id:"computed-properties"},"Computed properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"struct Circle {\n    var radius: Double\n    var area: Double {\n        return 3.14 * radius * radius\n    }\n}\n")),(0,r.kt)("h3",{id:"lazy-properties"},"Lazy properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class ImageLoader {\n    lazy var image: UIImage = {\n        // Load and return an image\n        return UIImage(named: "image.png")!\n    }()\n}\n')),(0,r.kt)("h3",{id:"equatable-and-comparable"},"Equatable and Comparable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"struct Person: Equatable, Comparable {\n    var name: String\n    var age: Int\n\n    static func < (lhs: Person, rhs: Person) -> Bool {\n        return lhs.age < rhs.age\n    }\n}\n")),(0,r.kt)("h3",{id:"codable"},"Codable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct Product: Codable {\n    var name: String\n    var price: Double\n}\nlet jsonData = """\n{\n    "name": "iPhone",\n    "price": 999.99\n}\n""".data(using: .utf8)!\nlet product = try JSONDecoder().decode(Product.self, from: jsonData)\n')),(0,r.kt)("h3",{id:"date-formatting"},"Date formatting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let dateFormatter = DateFormatter()\ndateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"\nlet date = dateFormatter.date(from: "2023-09-04 15:30:00")\n')),(0,r.kt)("h3",{id:"notificationcenter"},"NotificationCenter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'NotificationCenter.default.addObserver(self, selector: #selector(handleNotification(_:)), name: Notification.Name("MyNotification"), object: nil)\n')),(0,r.kt)("h3",{id:"dispatch-queues"},"Dispatch queues"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let queue = DispatchQueue(label: "com.myapp.myqueue")\nqueue.async {\n    // Code to execute asynchronously\n}\n')),(0,r.kt)("h3",{id:"user-defaults"},"User Defaults"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'UserDefaults.standard.set("John", forKey: "username")\nlet username = UserDefaults.standard.string(forKey: "username")\n')),(0,r.kt)("h3",{id:"file-manager"},"File Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let fileManager = FileManager.default\nif let documentsDir = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first {\n    // Work with the documents directory\n}\n")),(0,r.kt)("h3",{id:"core-data"},"Core Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import CoreData\n\nlet appDelegate = UIApplication.shared.delegate as! AppDelegate\nlet context = appDelegate.persistentContainer.viewContext\n\nlet entity = NSEntityDescription.entity(forEntityName: "Person", in: context)\nlet person = NSManagedObject(entity: entity!, insertInto: context)\nperson.setValue("John", forKey: "name")\n\ndo {\n    try context.save()\n} catch {\n    print("Failed to save data: \\(error)")\n}\n')),(0,r.kt)("h3",{id:"uialertcontroller"},"UIAlertController"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let alertController = UIAlertController(title: "Alert", message: "This is an alert message.", preferredStyle: .alert)\nlet okAction = UIAlertAction(title: "OK", style: .default, handler: nil)\nalertController.addAction(okAction)\npresent(alertController, animated: true, completion: nil)\n')),(0,r.kt)("h3",{id:"segues-storyboard"},"Segues (Storyboard)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'performSegue(withIdentifier: "showDetail", sender: self)\n')),(0,r.kt)("h3",{id:"gesture-recognizers"},"Gesture Recognizers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))\nview.addGestureRecognizer(tapGesture)\n")),(0,r.kt)("h3",{id:"core-location-location-services"},"Core Location (Location Services)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"import CoreLocation\n\nlet locationManager = CLLocationManager()\nlocationManager.requestWhenInUseAuthorization()\nlocationManager.startUpdatingLocation()\n")),(0,r.kt)("h3",{id:"generics"},"Generics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"func swap<T>(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n")),(0,r.kt)("h3",{id:"higher-order-functions-map"},"Higher-order functions-map"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let numbers = [1, 2, 3, 4, 5]\nlet squaredNumbers = numbers.map { $0 * $0 }\n")),(0,r.kt)("h3",{id:"higher-order-functions-filter"},"Higher-order functions-filter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let evenNumbers = numbers.filter { $0 % 2 == 0 }\n")),(0,r.kt)("h3",{id:"higher-order-functions-reduce"},"Higher-order functions-reduce"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let sum = numbers.reduce(0, +)\n")),(0,r.kt)("h3",{id:"asyncawait-ios-15"},"Async/Await (iOS 15+)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"async {\n    let data = await fetchData()\n    process(data)\n}\n")),(0,r.kt)("h3",{id:"result-type-error-handling"},"Result Type (Error Handling)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"func divide(_ a: Int, by b: Int) -> Result<Int, MyError> {\n    if b == 0 {\n        return .failure(MyError.divisionByZero)\n    }\n    return .success(a / b)\n}\n")),(0,r.kt)("h3",{id:"custom-operators"},"Custom operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"infix operator **: MultiplicationPrecedence\n\nfunc **(base: Double, exponent: Double) -> Double {\n    return pow(base, exponent)\n}\n")),(0,r.kt)("h3",{id:"key-value-observing-kvo"},"Key-Value Observing (KVO)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class MyClass: NSObject {\n    @objc dynamic var value: Int = 0\n}\nlet myObject = MyClass()\nmyObject.addObserver(self, forKeyPath: "value", options: .new, context: nil)\n')),(0,r.kt)("h3",{id:"codable-with-custom-keys"},"Codable with Custom Keys"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'struct Person: Codable {\n    enum CodingKeys: String, CodingKey {\n        case firstName = "first_name"\n        case lastName = "last_name"\n    }\n    var firstName: String\n    var lastName: String\n}\n')),(0,r.kt)("h3",{id:"core-animation"},"Core animation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let animation = CABasicAnimation(keyPath: "position")\nanimation.fromValue = CGPoint(x: 0, y: 0)\nanimation.toValue = CGPoint(x: 100, y: 100)\nanimation.duration = 2.0\nlayer.add(animation, forKey: "positionAnimation")\n')),(0,r.kt)("h3",{id:"concurrency-with-dispatchgroup"},"Concurrency with DispatchGroup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let group = DispatchGroup()\n\ngroup.enter()\nfetchData { data in\n    // Process data\n    group.leave()\n}\n\ngroup.enter()\nfetchImage { image in\n    // Process image\n    group.leave()\n}\n\ngroup.notify(queue: .main) {\n    // All tasks are done\n}\n")),(0,r.kt)("h3",{id:"core-graphics-drawing"},"Core graphics drawing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"class CustomView: UIView {\n    override func draw(_ rect: CGRect) {\n        let context = UIGraphicsGetCurrentContext()\n        context?.setFillColor(UIColor.blue.cgColor)\n        context?.fillEllipse(in: CGRect(x: 50, y: 50, width: 100, height: 100))\n    }\n}\n")),(0,r.kt)("h3",{id:"autolayout-programmatically"},"Autolayout Programmatically"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let redView = UIView()\nredView.backgroundColor = .red\nredView.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(redView)\n\nredView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20).isActive = true\nredView.topAnchor.constraint(equalTo: view.topAnchor, constant: 20).isActive = true\nredView.widthAnchor.constraint(equalToConstant: 100).isActive = true\nredView.heightAnchor.constraint(equalToConstant: 100).isActive = true\n")),(0,r.kt)("h3",{id:"core-data-relationships"},"Core Data Relationships"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"class Author: NSManagedObject {\n    @NSManaged var name: String\n    @NSManaged var books: NSSet\n}\n\nclass Book: NSManagedObject {\n    @NSManaged var title: String\n    @NSManaged var author: Author?\n}\n")),(0,r.kt)("h3",{id:"dependency-injection"},"Dependency Injection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class DataManager {\n    func fetchData() -> [String] {\n        // Fetch data from a source\n        return ["Item 1", "Item 2", "Item 3"]\n    }\n}\n\nclass MyViewController {\n    let dataManager: DataManager\n\n    init(dataManager: DataManager) {\n        self.dataManager = dataManager\n    }\n}\n')),(0,r.kt)("h3",{id:"swift-package-manager"},"Swift Package Manager"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// Create a Swift package\nswift package init --type library\n\n// Add dependencies to Package.swift\ndependencies: [\n    .package(url: "https://github.com/example/package.git", from: "1.0.0")\n],\ntargets: [\n    .target(name: "MyPackage", dependencies: ["ExamplePackage"]),\n]\n')),(0,r.kt)("h3",{id:"keychain-access"},"Keychain Access"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import KeychainAccess\n\nlet keychain = Keychain(service: "com.myapp")\nkeychain["username"] = "John"\nlet storedUsername = keychain["username"]\n')),(0,r.kt)("h3",{id:"unit-testing-with-xctest"},"Unit Testing with XCTest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"import XCTest\n\nclass MyTests: XCTestCase {\n    func testAddition() {\n        let result = add(2, 3)\n        XCTAssertEqual(result, 5)\n    }\n}\n")),(0,r.kt)("h3",{id:"custom-property-wrappers"},"Custom Property Wrappers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'@propertyWrapper\nstruct Trimmed {\n    private(set) var value: String = ""\n\n    var wrappedValue: String {\n        get { value }\n        set { value = newValue.trimmingCharacters(in: .whitespacesAndNewlines) }\n    }\n}\n\nstruct MyStruct {\n    @Trimmed var text: String\n}\n')),(0,r.kt)("h3",{id:"swiftui"},"SwiftUI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text("Hello, SwiftUI!")\n            .font(.largeTitle)\n            .foregroundColor(.blue)\n    }\n}\n')))}d.isMDXComponent=!0}}]);