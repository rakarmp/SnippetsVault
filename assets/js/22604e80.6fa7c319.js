"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7252],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),g=r,d=m["".concat(s,".").concat(g)]||m[g]||p[g]||i;return t?a.createElement(d,l(l({ref:n},c),{},{components:t})):a.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const i={},l="Go (Golang)",o={unversionedId:"golang_snippets",id:"golang_snippets",title:"Go (Golang)",description:"Hello World",source:"@site/docs/golang_snippets.md",sourceDirName:".",slug:"/golang_snippets",permalink:"/SnippetsVault/docs/golang_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/golang_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSS",permalink:"/SnippetsVault/docs/css_snippets"},next:{title:"Haskell",permalink:"/SnippetsVault/docs/haskell_snippets"}},s={},u=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables",id:"variables",level:3},{value:"User input",id:"user-input",level:3},{value:"If-else",id:"if-else",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Array access",id:"array-access",level:3},{value:"Functions",id:"functions",level:3},{value:"Structs (Custom data types)",id:"structs-custom-data-types",level:3},{value:"Struct initialization",id:"struct-initialization",level:3},{value:"Slices(Dynamic arrays)",id:"slicesdynamic-arrays",level:3},{value:"Slice operations (Append, Remove)",id:"slice-operations-append-remove",level:3},{value:"Slice iteration (range)",id:"slice-iteration-range",level:3},{value:"Maps (key-value pairs)",id:"maps-key-value-pairs",level:3},{value:"Map operations (Insert, Delete)",id:"map-operations-insert-delete",level:3},{value:"Map iteration",id:"map-iteration",level:3},{value:"String manipulation",id:"string-manipulation",level:3},{value:"String concatenation",id:"string-concatenation",level:3},{value:"Time formatting",id:"time-formatting",level:3},{value:"Error handling (panic and recover)",id:"error-handling-panic-and-recover",level:3},{value:"File Reading (io/ioutil)",id:"file-reading-ioioutil",level:3},{value:"File Writing (os)",id:"file-writing-os",level:3},{value:"Working with enums",id:"working-with-enums",level:3},{value:"Regular expressions (regexp)",id:"regular-expressions-regexp",level:3},{value:"Working with Interfaces",id:"working-with-interfaces",level:3},{value:"Goroutines (Concurrent Execution)",id:"goroutines-concurrent-execution",level:3},{value:"Channels (Communication Between Goroutines)",id:"channels-communication-between-goroutines",level:3},{value:"Wait Groups (Synchronization)",id:"wait-groups-synchronization",level:3},{value:"Error handling (Custom errors)",id:"error-handling-custom-errors",level:3},{value:"JSON Serialization and Deserialization",id:"json-serialization-and-deserialization",level:3},{value:"Working with Timezones (time.LoadLocation)",id:"working-with-timezones-timeloadlocation",level:3},{value:"Command-Line Arguments (os.Args)",id:"command-line-arguments-osargs",level:3},{value:"Reflection (reflect package)",id:"reflection-reflect-package",level:3},{value:"Function variadic parameters",id:"function-variadic-parameters",level:3},{value:"Working with time durations",id:"working-with-time-durations",level:3},{value:"Defer Statement",id:"defer-statement",level:3},{value:"Custom String Formatting",id:"custom-string-formatting",level:3},{value:"Multiple Return Values",id:"multiple-return-values",level:3},{value:"Reading from Standard Input (fmt.Scan)",id:"reading-from-standard-input-fmtscan",level:3},{value:"Anonymous Functions (Closures)",id:"anonymous-functions-closures",level:3},{value:"Goroutines and Channels (Fan-out, Fan-in)",id:"goroutines-and-channels-fan-out-fan-in",level:3},{value:"Mutexes and Synchronization (Mutex)",id:"mutexes-and-synchronization-mutex",level:3},{value:"Defer Statement and Recovery (Panic and Recover)",id:"defer-statement-and-recovery-panic-and-recover",level:3},{value:"Reflection (reflect package)",id:"reflection-reflect-package-1",level:3},{value:"Function Closure",id:"function-closure",level:3},{value:"Custom errors",id:"custom-errors",level:3},{value:"Context Package (Cancellation and Timeout)",id:"context-package-cancellation-and-timeout",level:3},{value:"Working with JSON (Unmarshalling into Structs)",id:"working-with-json-unmarshalling-into-structs",level:3},{value:"Working with Time (time package)",id:"working-with-time-time-package",level:3},{value:"HTTP Server and Client (net/http package)",id:"http-server-and-client-nethttp-package",level:3},{value:"Creating and using interfaces",id:"creating-and-using-interfaces",level:3},{value:"Function variadic parameters",id:"function-variadic-parameters-1",level:3},{value:"Working with Templates (html/template package)",id:"working-with-templates-htmltemplate-package",level:3},{value:"Web Routing with Gorilla Mux (gorilla/mux package)",id:"web-routing-with-gorilla-mux-gorillamux-package",level:3},{value:"Custom Middleware in HTTP Handlers",id:"custom-middleware-in-http-handlers",level:3},{value:"Database Access with SQL (database/sql package)",id:"database-access-with-sql-databasesql-package",level:3},{value:"Concurrent Map Access (sync.Map)",id:"concurrent-map-access-syncmap",level:3},{value:"Panic and Recover in Goroutines",id:"panic-and-recover-in-goroutines",level:3},{value:"Custom Sort Function (sort package)",id:"custom-sort-function-sort-package",level:3}],c={toc:u},m="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"go-golang"},"Go (Golang)"),(0,r.kt)("h3",{id:"hello-world"},"Hello World"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\nimport "fmt"\nfunc main() {\n    fmt.Println("Hello, World!")\n}\n')),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var age int = 30\nvar name string = "John"\n')),(0,r.kt)("h3",{id:"user-input"},"User input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "fmt"\nfunc main() {\n    var userInput string\n    fmt.Print("Enter something: ")\n    fmt.Scanln(&userInput)\n    fmt.Println("You entered:", userInput)\n}\n')),(0,r.kt)("h3",{id:"if-else"},"If-else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'if age >= 18 {\n    fmt.Println("You are an adult.")\n} else {\n    fmt.Println("You are a minor.")\n}\n')),(0,r.kt)("h3",{id:"for-loop"},"For loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"for i := 0; i < 5; i++ {\n    fmt.Println(i)\n}\n")),(0,r.kt)("h3",{id:"while-loop"},"While loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"count := 0\nfor count < 5 {\n    fmt.Println(count)\n    count++\n}\n")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"numbers := [5]int{1, 2, 3, 4, 5}\n")),(0,r.kt)("h3",{id:"array-access"},"Array access"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"firstNumber := numbers[0]\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func add(a, b int) int {\n    return a + b\n}\n")),(0,r.kt)("h3",{id:"structs-custom-data-types"},"Structs (Custom data types)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Person struct {\n    Name string\n    Age  int\n}\n")),(0,r.kt)("h3",{id:"struct-initialization"},"Struct initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'person := Person{Name: "Alice", Age: 25}\n')),(0,r.kt)("h3",{id:"slicesdynamic-arrays"},"Slices(Dynamic arrays)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"numbers := []int{1, 2, 3, 4, 5}\n")),(0,r.kt)("h3",{id:"slice-operations-append-remove"},"Slice operations (Append, Remove)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"numbers = append(numbers, 6)\nnumbers = append(numbers[:2], numbers[3:]...)\n")),(0,r.kt)("h3",{id:"slice-iteration-range"},"Slice iteration (range)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'for index, value := range numbers {\n    fmt.Printf("Index: %d, Value: %d\\n", index, value)\n}\n')),(0,r.kt)("h3",{id:"maps-key-value-pairs"},"Maps (key-value pairs)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'scores := map[string]int{"Alice": 95, "Bob": 88}\n')),(0,r.kt)("h3",{id:"map-operations-insert-delete"},"Map operations (Insert, Delete)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'scores["Charlie"] = 72\ndelete(scores, "Bob")\n')),(0,r.kt)("h3",{id:"map-iteration"},"Map iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'for name, score := range scores {\n    fmt.Printf("Name: %s, Score: %d\\n", name, score)\n}\n')),(0,r.kt)("h3",{id:"string-manipulation"},"String manipulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'text := "Hello, World!"\nsubstring := text[0:5]\n')),(0,r.kt)("h3",{id:"string-concatenation"},"String concatenation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'greeting := "Hello"\nname := "Alice"\nmessage := greeting + ", " + name + "!"\n')),(0,r.kt)("h3",{id:"time-formatting"},"Time formatting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "time"\ncurrentTime := time.Now()\nformattedTime := currentTime.Format("2006-01-02 15:04:05")\n')),(0,r.kt)("h3",{id:"error-handling-panic-and-recover"},"Error handling (panic and recover)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func example() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Println("Recovered:", r)\n        }\n    }()\n    panic("Something went wrong!")\n}\n')),(0,r.kt)("h3",{id:"file-reading-ioioutil"},"File Reading (io/ioutil)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "io/ioutil"\ncontent, err := ioutil.ReadFile("example.txt")\nif err != nil {\n    fmt.Println("Error:", err)\n}\n')),(0,r.kt)("h3",{id:"file-writing-os"},"File Writing (os)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "os"\nfile, err := os.Create("output.txt")\nif err != nil {\n    fmt.Println("Error:", err)\n}\ndefer file.Close()\nfile.WriteString("This is some text.")\n')),(0,r.kt)("h3",{id:"working-with-enums"},"Working with enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const (\n    Monday = iota\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n    Saturday\n    Sunday\n)\n")),(0,r.kt)("h3",{id:"regular-expressions-regexp"},"Regular expressions (regexp)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "regexp"\ntext := "My email is example@example.com."\npattern := `\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b`\nisEmail, _ := regexp.MatchString(pattern, text)\n')),(0,r.kt)("h3",{id:"working-with-interfaces"},"Working with Interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Shape interface {\n    Area() float64\n}\n")),(0,r.kt)("h3",{id:"goroutines-concurrent-execution"},"Goroutines (Concurrent Execution)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "fmt"\nimport "time"\nfunc main() {\n    go func() {\n        fmt.Println("Goroutine started")\n    }()\n    time.Sleep(time.Second)\n}\n')),(0,r.kt)("h3",{id:"channels-communication-between-goroutines"},"Channels (Communication Between Goroutines)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"ch := make(chan int)\ngo func() {\n    ch <- 42\n}()\nvalue := <-ch\n")),(0,r.kt)("h3",{id:"wait-groups-synchronization"},"Wait Groups (Synchronization)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "sync"\nvar wg sync.WaitGroup\nwg.Add(2)\ngo func() {\n    defer wg.Done()\n    // Task 1\n}()\ngo func() {\n    defer wg.Done()\n    // Task 2\n}()\nwg.Wait()\n')),(0,r.kt)("h3",{id:"error-handling-custom-errors"},"Error handling (Custom errors)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type CustomError struct {\n    Message string\n}\nfunc (e *CustomError) Error() string {\n    return e.Message\n}\n")),(0,r.kt)("h3",{id:"json-serialization-and-deserialization"},"JSON Serialization and Deserialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "encoding/json"\ndata := struct {\n    Name string `json:"name"`\n    Age  int    `json:"age"`\n}{Name: "Alice", Age: 25}\njsonString, _ := json.Marshal(data)\n')),(0,r.kt)("h3",{id:"working-with-timezones-timeloadlocation"},"Working with Timezones (time.LoadLocation)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "time"\nlocation, _ := time.LoadLocation("America/New_York")\ncurrent_time := time.Now().In(location)\n')),(0,r.kt)("h3",{id:"command-line-arguments-osargs"},"Command-Line Arguments (os.Args)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "os"\nif len(os.Args) > 1 {\n    arg := os.Args[1]\n    // Process command-line argument\n}\n')),(0,r.kt)("h3",{id:"reflection-reflect-package"},"Reflection (reflect package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "reflect"\nvalue := 42\nvalueType := reflect.TypeOf(value)\n')),(0,r.kt)("h3",{id:"function-variadic-parameters"},"Function variadic parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func sum(numbers ...int) int {\n    total := 0\n    for _, num := range numbers {\n        total += num\n    }\n    return total\n}\n")),(0,r.kt)("h3",{id:"working-with-time-durations"},"Working with time durations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "time"\nduration := 5 * time.Second\ntime.Sleep(duration)\n')),(0,r.kt)("h3",{id:"defer-statement"},"Defer Statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    defer fmt.Println("Deferred statement")\n    fmt.Println("Main function")\n}\n')),(0,r.kt)("h3",{id:"custom-string-formatting"},"Custom String Formatting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type Person struct {\n    Name string\n    Age  int\n}\nfunc (p Person) String() string {\n    return fmt.Sprintf("%s (%d years old)", p.Name, p.Age)\n}\n')),(0,r.kt)("h3",{id:"multiple-return-values"},"Multiple Return Values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func divide(a, b int) (int, error) {\n    if b == 0 {\n        return 0, fmt.Errorf("Division by zero")\n    }\n    return a / b, nil\n}\n')),(0,r.kt)("h3",{id:"reading-from-standard-input-fmtscan"},"Reading from Standard Input (fmt.Scan)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "fmt"\nvar input string\nfmt.Print("Enter something: ")\nfmt.Scan(&input)\nfmt.Println("You entered:", input)\n')),(0,r.kt)("h3",{id:"anonymous-functions-closures"},"Anonymous Functions (Closures)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    x := 10\n    func() {\n        fmt.Println("Closure value:", x)\n    }()\n}\n')),(0,r.kt)("h3",{id:"goroutines-and-channels-fan-out-fan-in"},"Goroutines and Channels (Fan-out, Fan-in)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        results <- j * 2\n    }\n}\n\nfunc main() {\n    jobs := make(chan int, 100)\n    results := make(chan int, 100)\n\n    // Start workers\n    for w := 1; w <= 3; w++ {\n        go worker(w, jobs, results)\n    }\n\n    // Send jobs\n    for j := 1; j <= 9; j++ {\n        jobs <- j\n    }\n    close(jobs)\n\n    // Collect results\n    for a := 1; a <= 9; a++ {\n        <-results\n    }\n}\n")),(0,r.kt)("h3",{id:"mutexes-and-synchronization-mutex"},"Mutexes and Synchronization (Mutex)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import "sync"\n\nvar counter int\nvar mu sync.Mutex\n\nfunc increment() {\n    mu.Lock()\n    counter++\n    mu.Unlock()\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    for i := 0; i < 1000; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            increment()\n        }()\n    }\n    wg.Wait()\n    println("Counter:", counter)\n}\n')),(0,r.kt)("h3",{id:"defer-statement-and-recovery-panic-and-recover"},"Defer Statement and Recovery (Panic and Recover)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func recoverDemo() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Println("Recovered:", r)\n        }\n    }()\n\n    panic("Panic!")\n}\n\nfunc main() {\n    recoverDemo()\n    fmt.Println("After panic")\n}\n')),(0,r.kt)("h3",{id:"reflection-reflect-package-1"},"Reflection (reflect package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "reflect"\n)\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc main() {\n    p := Person{"Alice", 30}\n    valueType := reflect.TypeOf(p)\n    fmt.Println("Type:", valueType)\n\n    value := reflect.ValueOf(p)\n    fmt.Println("Fields:")\n    for i := 0; i < value.NumField(); i++ {\n        field := value.Field(i)\n        fmt.Printf("%s: %v\\n", valueType.Field(i).Name, field.Interface())\n    }\n}\n')),(0,r.kt)("h3",{id:"function-closure"},"Function Closure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func generateAdder(a int) func(int) int {\n    return func(b int) int {\n        return a + b\n    }\n}\n\nfunc main() {\n    add5 := generateAdder(5)\n    result := add5(10)\n    fmt.Println("Result:", result)\n}\n')),(0,r.kt)("h3",{id:"custom-errors"},"Custom errors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type MyError struct {\n    Message string\n}\n\nfunc (e *MyError) Error() string {\n    return e.Message\n}\n\nfunc myFunction() error {\n    return &MyError{"Custom error message"}\n}\n\nfunc main() {\n    if err := myFunction(); err != nil {\n        fmt.Println("Error:", err)\n    }\n}\n')),(0,r.kt)("h3",{id:"context-package-cancellation-and-timeout"},"Context Package (Cancellation and Timeout)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc myFunction(ctx context.Context) {\n    select {\n    case <-time.After(2 * time.Second):\n        fmt.Println("Task completed")\n    case <-ctx.Done():\n        fmt.Println("Task canceled")\n    }\n}\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\n    defer cancel()\n    myFunction(ctx)\n}\n')),(0,r.kt)("h3",{id:"working-with-json-unmarshalling-into-structs"},"Working with JSON (Unmarshalling into Structs)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "encoding/json"\n    "fmt"\n)\n\ntype Person struct {\n    Name string `json:"name"`\n    Age  int    `json:"age"`\n}\n\nfunc main() {\n    jsonString := `{"name":"Alice","age":25}`\n    var person Person\n    if err := json.Unmarshal([]byte(jsonString), &person); err != nil {\n        fmt.Println("Error:", err)\n        return\n    }\n    fmt.Printf("Name: %s, Age: %d\\n", person.Name, person.Age)\n}\n')),(0,r.kt)("h3",{id:"working-with-time-time-package"},"Working with Time (time package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    currentTime := time.Now()\n    fmt.Println("Current Time:", currentTime)\n\n    tomorrow := currentTime.Add(24 * time.Hour)\n    fmt.Println("Tomorrow:", tomorrow)\n}\n')),(0,r.kt)("h3",{id:"http-server-and-client-nethttp-package"},"HTTP Server and Client (net/http package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "net/http"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, "Hello, World!")\n}\n\nfunc main() {\n    http.HandleFunc("/hello", helloHandler)\n    http.ListenAndServe(":8080", nil)\n}\n')),(0,r.kt)("h3",{id:"creating-and-using-interfaces"},"Creating and using interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type Shape interface {\n    Area() float64\n}\n\ntype Circle struct {\n    Radius float64\n}\n\nfunc (c Circle) Area() float64 {\n    return 3.14 * c.Radius * c.Radius\n}\n\ntype Square struct {\n    SideLength float64\n}\n\nfunc (s Square) Area() float64 {\n    return s.SideLength * s.SideLength\n}\n\nfunc main() {\n    c := Circle{Radius: 5}\n    s := Square{SideLength: 4}\n\n    shapes := []Shape{c, s}\n    for _, shape := range shapes {\n        fmt.Printf("Area: %f\\n", shape.Area())\n    }\n}\n')),(0,r.kt)("h3",{id:"function-variadic-parameters-1"},"Function variadic parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func sum(numbers ...int) int {\n    total := 0\n    for _, num := range numbers {\n        total += num\n    }\n    return total\n}\n\nfunc main() {\n    result := sum(1, 2, 3, 4, 5)\n    fmt.Println("Sum:", result)\n}\n')),(0,r.kt)("h3",{id:"working-with-templates-htmltemplate-package"},"Working with Templates (html/template package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "html/template"\n    "os"\n)\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc main() {\n    tmpl, _ := template.New("example").Parse("Name: {{.Name}}, Age: {{.Age}}\\n")\n    person := Person{Name: "Alice", Age: 25}\n    tmpl.Execute(os.Stdout, person)\n}\n')),(0,r.kt)("h3",{id:"web-routing-with-gorilla-mux-gorillamux-package"},"Web Routing with Gorilla Mux (gorilla/mux package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "net/http"\n    "github.com/gorilla/mux"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, "Hello, World!")\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc("/hello", helloHandler)\n\n    http.Handle("/", r)\n    http.ListenAndServe(":8080", nil)\n}\n')),(0,r.kt)("h3",{id:"custom-middleware-in-http-handlers"},"Custom Middleware in HTTP Handlers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "net/http"\n)\n\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        fmt.Println("Request received:", r.URL.Path)\n        next.ServeHTTP(w, r)\n    })\n}\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, "Hello, World!")\n}\n\nfunc main() {\n    r := http.NewServeMux()\n    r.HandleFunc("/hello", helloHandler)\n\n    http.Handle("/", loggingMiddleware(r))\n    http.ListenAndServe(":8080", nil)\n}\n')),(0,r.kt)("h3",{id:"database-access-with-sql-databasesql-package"},"Database Access with SQL (database/sql package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "database/sql"\n    "fmt"\n    _ "github.com/go-sql-driver/mysql"\n)\n\nfunc main() {\n    db, err := sql.Open("mysql", "user:password@tcp(localhost:3306)/database")\n    if err != nil {\n        fmt.Println("Error:", err)\n        return\n    }\n    defer db.Close()\n\n    rows, err := db.Query("SELECT name FROM users WHERE age > ?", 25)\n    if err != nil {\n        fmt.Println("Error:", err)\n        return\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n        var name string\n        err := rows.Scan(&name)\n        if err != nil {\n            fmt.Println("Error:", err)\n            return\n        }\n        fmt.Println("Name:", name)\n    }\n}\n')),(0,r.kt)("h3",{id:"concurrent-map-access-syncmap"},"Concurrent Map Access (sync.Map)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "sync"\n)\n\nfunc main() {\n    var m sync.Map\n\n    m.Store("key1", "value1")\n    m.Store("key2", "value2")\n\n    value, ok := m.Load("key1")\n    if ok {\n        fmt.Println("Value:", value)\n    }\n\n    m.Delete("key2")\n}\n')),(0,r.kt)("h3",{id:"panic-and-recover-in-goroutines"},"Panic and Recover in Goroutines"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "time"\n)\n\nfunc recoverInGoroutine() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Println("Recovered in goroutine:", r)\n        }\n    }()\n\n    panic("Goroutine panic")\n}\n\nfunc main() {\n    go recoverInGoroutine()\n    time.Sleep(time.Second)\n}\n')),(0,r.kt)("h3",{id:"custom-sort-function-sort-package"},"Custom Sort Function (sort package)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "sort"\n)\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\ntype ByAge []Person\n\nfunc (a ByAge) Len() int           { return len(a) }\nfunc (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a ByAge) Less(i, j int) bool { return a[i].Age < a[j].Age }\n\nfunc main() {\n    people := []Person{\n        {"Alice", 30},\n        {"Bob", 25},\n        {"Charlie", 35},\n    }\n\n    sort.Sort(ByAge(people))\n\n    for _, p := range people {\n        fmt.Printf("Name: %s, Age: %d\\n", p.Name, p.Age)\n    }\n}\n')))}p.isMDXComponent=!0}}]);