"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[174],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=o(n),m=r,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var o=2;o<s;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const s={},i="TypeScript",l={unversionedId:"typescript_snippets",id:"typescript_snippets",title:"TypeScript",description:"Declare a variable",source:"@site/docs/typescript_snippets.md",sourceDirName:".",slug:"/typescript_snippets",permalink:"/docs/typescript_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/typescript_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Swift",permalink:"/docs/swift_snippets"}},p={},o=[{value:"Declare a variable",id:"declare-a-variable",level:3},{value:"Initialize a variable",id:"initialize-a-variable",level:3},{value:"Declare a constant",id:"declare-a-constant",level:3},{value:"Type annotations for functions",id:"type-annotations-for-functions",level:3},{value:"Optional functions parameters",id:"optional-functions-parameters",level:3},{value:"Default function parameters",id:"default-function-parameters",level:3},{value:"Arrow function (Lambda expression)",id:"arrow-function-lambda-expression",level:3},{value:"Interface",id:"interface",level:3},{value:"Class Declaration",id:"class-declaration",level:3},{value:"Class inheritance",id:"class-inheritance",level:3},{value:"Access modifiers in classes",id:"access-modifiers-in-classes",level:3},{value:"Abstract classes",id:"abstract-classes",level:3},{value:"Type Aliases",id:"type-aliases",level:3},{value:"Union Types",id:"union-types",level:3},{value:"Type assertion (type casting)",id:"type-assertion-type-casting",level:3},{value:"Generics",id:"generics",level:3},{value:"Enums",id:"enums",level:3},{value:"Array iteration with forEach",id:"array-iteration-with-foreach",level:3},{value:"Array mappping",id:"array-mappping",level:3},{value:"Array filtering",id:"array-filtering",level:3},{value:"Object destructuring",id:"object-destructuring",level:3},{value:"Spread operator",id:"spread-operator",level:3},{value:"Rest parameters",id:"rest-parameters",level:3},{value:"Promises",id:"promises",level:3},{value:"Async/Await",id:"asyncawait",level:3},{value:"Type guards for instanceof",id:"type-guards-for-instanceof",level:3},{value:"Type guards for typeof",id:"type-guards-for-typeof",level:3},{value:"Type guards for custom types",id:"type-guards-for-custom-types",level:3},{value:"Nullish coallescing operator",id:"nullish-coallescing-operator",level:3},{value:"Optional chaining",id:"optional-chaining",level:3},{value:"Non-Nullable assertion operator",id:"non-nullable-assertion-operator",level:3},{value:"Decorators",id:"decorators",level:3},{value:"Type inference with as const",id:"type-inference-with-as-const",level:3},{value:"Conditional types",id:"conditional-types",level:3},{value:"Indexed access types",id:"indexed-access-types",level:3},{value:"Mapped types",id:"mapped-types",level:3},{value:"Type guards with never",id:"type-guards-with-never",level:3},{value:"Module Imports/Exports",id:"module-importsexports",level:3},{value:"Intersectio types",id:"intersectio-types",level:3},{value:"Type guards for discriminated unions",id:"type-guards-for-discriminated-unions",level:3},{value:"Conditional (ternary) operator",id:"conditional-ternary-operator",level:3},{value:"Keyof and Lookup Types",id:"keyof-and-lookup-types",level:3},{value:"Type inference with Generics",id:"type-inference-with-generics",level:3},{value:"Conditional types with generics",id:"conditional-types-with-generics",level:3},{value:"Template literal types",id:"template-literal-types",level:3},{value:"Using mapped types with partial",id:"using-mapped-types-with-partial",level:3},{value:"Using mapped types with record",id:"using-mapped-types-with-record",level:3},{value:"Type-safe Event Handling",id:"type-safe-event-handling",level:3},{value:"Indexed access with tuples",id:"indexed-access-with-tuples",level:3},{value:"Recursive types",id:"recursive-types",level:3},{value:"Type-safe object merging",id:"type-safe-object-merging",level:3},{value:"using the keyof operator for object keys",id:"using-the-keyof-operator-for-object-keys",level:3},{value:"Function overloading",id:"function-overloading",level:3},{value:"Discriminated Union with Function Types",id:"discriminated-union-with-function-types",level:3},{value:"Conditional type inference with infer",id:"conditional-type-inference-with-infer",level:3},{value:"Using TypeScript with React",id:"using-typescript-with-react",level:3},{value:"Type-safe Axios Requests (Example)",id:"type-safe-axios-requests-example",level:3}],c={toc:o},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typescript"},"TypeScript"),(0,r.kt)("h3",{id:"declare-a-variable"},"Declare a variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let variableName: dataType;\n")),(0,r.kt)("h3",{id:"initialize-a-variable"},"Initialize a variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"let count: number = 10;\n")),(0,r.kt)("h3",{id:"declare-a-constant"},"Declare a constant"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const PI: number = 3.14159265359;\n")),(0,r.kt)("h3",{id:"type-annotations-for-functions"},"Type annotations for functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function greet(name: string): string {\n  return `Hello, ${name}!`;\n}\n")),(0,r.kt)("h3",{id:"optional-functions-parameters"},"Optional functions parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function printMessage(message: string, prefix?: string) {\n  if (prefix) {\n    console.log(`${prefix}: ${message}`);\n  } else {\n    console.log(message);\n  }\n}\n")),(0,r.kt)("h3",{id:"default-function-parameters"},"Default function parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function greet(name: string, greeting: string = "Hello") {\n  console.log(`${greeting}, ${name}!`);\n}\n')),(0,r.kt)("h3",{id:"arrow-function-lambda-expression"},"Arrow function (Lambda expression)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const add = (a: number, b: number): number => a + b;\n")),(0,r.kt)("h3",{id:"interface"},"Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n  name: string;\n  age: number;\n}\n")),(0,r.kt)("h3",{id:"class-declaration"},"Class Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class Car {\n  make: string;\n  constructor(make: string) {\n    this.make = make;\n  }\n}\n")),(0,r.kt)("h3",{id:"class-inheritance"},"Class inheritance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class SportsCar extends Car {\n  topSpeed: number;\n  constructor(make: string, topSpeed: number) {\n    super(make);\n    this.topSpeed = topSpeed;\n  }\n}\n")),(0,r.kt)("h3",{id:"access-modifiers-in-classes"},"Access modifiers in classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class Animal {\n  private name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n")),(0,r.kt)("h3",{id:"abstract-classes"},"Abstract classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"abstract class Shape {\n  abstract area(): number;\n}\n")),(0,r.kt)("h3",{id:"type-aliases"},"Type Aliases"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Point = { x: number; y: number };\n")),(0,r.kt)("h3",{id:"union-types"},"Union Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'let result: string | number;\nresult = "success";\nresult = 42;\n')),(0,r.kt)("h3",{id:"type-assertion-type-casting"},"Type assertion (type casting)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'let value: any = "Hello, TypeScript!";\nlet length: number = (value as string).length;\n')),(0,r.kt)("h3",{id:"generics"},"Generics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function identity<T>(arg: T): T {\n  return arg;\n}\n")),(0,r.kt)("h3",{id:"enums"},"Enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"enum Color {\n  Red,\n  Green,\n  Blue,\n}\n")),(0,r.kt)("h3",{id:"array-iteration-with-foreach"},"Array iteration with forEach"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const numbers: number[] = [1, 2, 3, 4, 5];\nnumbers.forEach((num) => console.log(num));\n")),(0,r.kt)("h3",{id:"array-mappping"},"Array mappping"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const doubled = numbers.map((num) => num * 2);\n")),(0,r.kt)("h3",{id:"array-filtering"},"Array filtering"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const evenNumbers = numbers.filter((num) => num % 2 === 0);\n")),(0,r.kt)("h3",{id:"object-destructuring"},"Object destructuring"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const { name, age } = person;\n")),(0,r.kt)("h3",{id:"spread-operator"},"Spread operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const parts = [1, 2, 3];\nconst whole = [...parts, 4, 5];\n")),(0,r.kt)("h3",{id:"rest-parameters"},"Rest parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function sum(...nums: number[]): number {\n  return nums.reduce((total, num) => total + num, 0);\n}\n")),(0,r.kt)("h3",{id:"promises"},"Promises"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const fetchData = (): Promise<Data> => {\n  return fetch("https://example.com/data")\n    .then((response) => response.json())\n    .catch((error) => {\n      throw new Error("Error fetching data");\n    });\n};\n')),(0,r.kt)("h3",{id:"asyncawait"},"Async/Await"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'async function fetchData(): Promise<Data> {\n  try {\n    const response = await fetch("https://example.com/data");\n    return await response.json();\n  } catch (error) {\n    throw new Error("Error fetching data");\n  }\n}\n')),(0,r.kt)("h3",{id:"type-guards-for-instanceof"},"Type guards for instanceof"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"if (myVar instanceof MyClass) {\n  // myVar is an instance of MyClass\n}\n")),(0,r.kt)("h3",{id:"type-guards-for-typeof"},"Type guards for typeof"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'if (typeof myVar === "string") {\n  // myVar is a string\n}\n')),(0,r.kt)("h3",{id:"type-guards-for-custom-types"},"Type guards for custom types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function isPerson(obj: any): obj is Person {\n  return "name" in obj && "age" in obj;\n}\n')),(0,r.kt)("h3",{id:"nullish-coallescing-operator"},"Nullish coallescing operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = value ?? defaultValue;\n")),(0,r.kt)("h3",{id:"optional-chaining"},"Optional chaining"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const city = user?.address?.city;\n")),(0,r.kt)("h3",{id:"non-nullable-assertion-operator"},"Non-Nullable assertion operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'let element: HTMLElement | null = document.getElementById("example")!;\n')),(0,r.kt)("h3",{id:"decorators"},"Decorators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function log(\n  target: Object,\n  key: string | symbol,\n  descriptor: PropertyDescriptor\n) {\n  const originalMethod = descriptor.value;\n  descriptor.value = function (...args: any[]) {\n    console.log(`Calling ${key.toString()} with arguments: ${args.join(", ")}`);\n    return originalMethod.apply(this, args);\n  };\n}\n')),(0,r.kt)("h3",{id:"type-inference-with-as-const"},"Type inference with as const"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const config = {\n  API_URL: "https://api.example.com",\n  MAX_RESULTS: 10,\n} as const;\n')),(0,r.kt)("h3",{id:"conditional-types"},"Conditional types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type IsString<T> = T extends string ? true : false;\n")),(0,r.kt)("h3",{id:"indexed-access-types"},"Indexed access types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type PersonName = Person["name"];\n')),(0,r.kt)("h3",{id:"mapped-types"},"Mapped types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Optional<T> = {\n  [K in keyof T]?: T[K];\n};\n")),(0,r.kt)("h3",{id:"type-guards-with-never"},"Type guards with never"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function assertNever(value: never): never {\n  throw new Error(`Unexpected value: ${value}`);\n}\n")),(0,r.kt)("h3",{id:"module-importsexports"},"Module Imports/Exports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Export\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\n// Import\nimport { add } from "./math";\n')),(0,r.kt)("h3",{id:"intersectio-types"},"Intersectio types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Admin = {\n  name: string;\n  privileges: string[];\n};\n\ntype Employee = {\n  name: string;\n  startDate: Date;\n};\n\ntype ElevatedEmployee = Admin & Employee;\n")),(0,r.kt)("h3",{id:"type-guards-for-discriminated-unions"},"Type guards for discriminated unions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Result<T> =\n  | { success: true; value: T }\n  | { success: false; error: string };\n\nfunction handleResult(result: Result<number>) {\n  if (result.success) {\n    console.log(`Result is ${result.value}`);\n  } else {\n    console.error(`Error: ${result.error}`);\n  }\n}\n")),(0,r.kt)("h3",{id:"conditional-ternary-operator"},"Conditional (ternary) operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type User = {\n  isAdmin: boolean;\n};\n\ntype Permission = User["isAdmin"] extends true ? "Admin" : "User";\n')),(0,r.kt)("h3",{id:"keyof-and-lookup-types"},"Keyof and Lookup Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type User = {\n  id: number;\n  name: string;\n  email: string;\n};\n\ntype UserKeys = keyof User;\ntype UserType = User["name"];\n')),(0,r.kt)("h3",{id:"type-inference-with-generics"},"Type inference with Generics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function firstElement<T>(arr: T[]): T {\n  return arr[0];\n}\n\nconst element = firstElement([1, 2, 3]); // element is inferred as number\n")),(0,r.kt)("h3",{id:"conditional-types-with-generics"},"Conditional types with generics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type TypeName<T> = T extends string\n  ? "string"\n  : T extends number\n  ? "number"\n  : "other";\n')),(0,r.kt)("h3",{id:"template-literal-types"},"Template literal types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type Greeting = `Hello, ${string}!`;\nconst greeting: Greeting = "Hello, TypeScript!";\n')),(0,r.kt)("h3",{id:"using-mapped-types-with-partial"},"Using mapped types with partial"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type PartialUser = Partial<User>;\n")),(0,r.kt)("h3",{id:"using-mapped-types-with-record"},"Using mapped types with record"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type CountryPopulation = Record<"USA" | "Canada" | "Mexico", number>;\n')),(0,r.kt)("h3",{id:"type-safe-event-handling"},"Type-safe Event Handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class EventEmitter<T> {\n  private listeners: Record<string, ((data: T) => void)[]> = {};\n\n  on(event: string, listener: (data: T) => void) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(listener);\n  }\n\n  emit(event: string, data: T) {\n    const eventListeners = this.listeners[event];\n    if (eventListeners) {\n      eventListeners.forEach((listener) => listener(data));\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"indexed-access-with-tuples"},"Indexed access with tuples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Tuple = [string, number, boolean];\ntype SecondElement = Tuple[1]; // number\n")),(0,r.kt)("h3",{id:"recursive-types"},"Recursive types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type TreeNode<T> = {\n  value: T;\n  left?: TreeNode<T>;\n  right?: TreeNode<T>;\n};\n")),(0,r.kt)("h3",{id:"type-safe-object-merging"},"Type-safe object merging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type Merge<T, U> = {\n  [K in keyof T]: K extends keyof U ? U[K] : T[K];\n};\n\nconst mergedObj = merge({ a: 1, b: "string" }, { b: 2, c: true });\n')),(0,r.kt)("h3",{id:"using-the-keyof-operator-for-object-keys"},"using the keyof operator for object keys"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n\nconst user = { id: 1, name: "John" };\nconst id = getProperty(user, "id");\n')),(0,r.kt)("h3",{id:"function-overloading"},"Function overloading"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function createElement(tag: "div"): HTMLDivElement;\nfunction createElement(tag: "span"): HTMLSpanElement;\nfunction createElement(tag: string): HTMLElement {\n  return document.createElement(tag);\n}\n')),(0,r.kt)("h3",{id:"discriminated-union-with-function-types"},"Discriminated Union with Function Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'type Shape =\n  | { kind: "circle"; radius: number }\n  | { kind: "rectangle"; width: number; height: number };\n\nfunction calculateArea(shape: Shape): number {\n  switch (shape.kind) {\n    case "circle":\n      return Math.PI * shape.radius ** 2;\n    case "rectangle":\n      return shape.width * shape.height;\n  }\n}\n')),(0,r.kt)("h3",{id:"conditional-type-inference-with-infer"},"Conditional type inference with infer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type ExtractReturnType<T> = T extends (...args: any[]) => infer R ? R : never;\n")),(0,r.kt)("h3",{id:"using-typescript-with-react"},"Using TypeScript with React"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Props {\n  name: string;\n}\n\nconst MyComponent: React.FC<Props> = ({ name }) => {\n  return <div>Hello, {name}!</div>;\n};\n")),(0,r.kt)("h3",{id:"type-safe-axios-requests-example"},"Type-safe Axios Requests (Example)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import axios from "axios";\n\ninterface ApiResponse<T> {\n  data: T;\n  status: number;\n}\n\nasync function fetchData<T>(url: string): Promise<T> {\n  const response = await axios.get<ApiResponse<T>>(url);\n  return response.data.data;\n}\n')))}d.isMDXComponent=!0}}]);