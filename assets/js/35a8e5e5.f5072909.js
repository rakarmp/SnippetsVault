"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1e3],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=s,g=p["".concat(o,".").concat(m)]||p[m]||d[m]||r;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:s,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),s=(t(7294),t(3905));const r={},i="C",l={unversionedId:"csharp_snippets",id:"csharp_snippets",title:"C",description:"Hello World",source:"@site/docs/csharp_snippets.md",sourceDirName:".",slug:"/csharp_snippets",permalink:"/SnippetsVault/docs/csharp_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/csharp_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++",permalink:"/SnippetsVault/docs/cplus_snippets"},next:{title:"CSS",permalink:"/SnippetsVault/docs/css_snippets"}},o={},c=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables",id:"variables",level:3},{value:"User Input",id:"user-input",level:3},{value:"If-else Statement",id:"if-else-statement",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Array access",id:"array-access",level:3},{value:"Functions",id:"functions",level:3},{value:"Object oriented programming",id:"object-oriented-programming",level:3},{value:"Constructors and object initialization",id:"constructors-and-object-initialization",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Lists (System.Collections.Generic.List)",id:"lists-systemcollectionsgenericlist",level:3},{value:"List Operations (Add, Remove)",id:"list-operations-add-remove",level:3},{value:"List Iteration (foreach)",id:"list-iteration-foreach",level:3},{value:"Dictionaries (System.Collections.Generic.Dictionary)",id:"dictionaries-systemcollectionsgenericdictionary",level:3},{value:"Dictionary access and iteration",id:"dictionary-access-and-iteration",level:3},{value:"String manipulation",id:"string-manipulation",level:3},{value:"String splitting",id:"string-splitting",level:3},{value:"String Joining",id:"string-joining",level:3},{value:"DateTime (System.DateTime)",id:"datetime-systemdatetime",level:3},{value:"DateTime Formatting",id:"datetime-formatting",level:3},{value:"Exception handling",id:"exception-handling",level:3},{value:"File Writing",id:"file-writing",level:3},{value:"Working with Enums",id:"working-with-enums",level:3},{value:"Enum.Parse",id:"enumparse",level:3},{value:"LINQ (Language-Integrated Query)",id:"linq-language-integrated-query",level:3},{value:"LINQ (Select Projection)",id:"linq-select-projection",level:3},{value:"LINQ (Ordering)",id:"linq-ordering",level:3},{value:"LINQ (Grouping)",id:"linq-grouping",level:3},{value:"LINQ (Joining)",id:"linq-joining",level:3},{value:"Delegates and Events",id:"delegates-and-events",level:3},{value:"Custom delegates and event handlers",id:"custom-delegates-and-event-handlers",level:3},{value:"Asynchronous Programming (async/await)",id:"asynchronous-programming-asyncawait",level:3},{value:"Async/Await Error Handling",id:"asyncawait-error-handling",level:3},{value:"Attributes and Reflection",id:"attributes-and-reflection",level:3},{value:"Working with Nullable Types",id:"working-with-nullable-types",level:3},{value:"Extension Methods",id:"extension-methods",level:3},{value:"IDisposable and using",id:"idisposable-and-using",level:3},{value:"Interoperability with Unmanaged Code (DllImport)",id:"interoperability-with-unmanaged-code-dllimport",level:3},{value:"Lambda Expressions with LINQ (C# 3.0+)",id:"lambda-expressions-with-linq-c-30",level:3},{value:"LINQ Query Syntax (C# 3.0+)",id:"linq-query-syntax-c-30",level:3},{value:"Extension Methods with LINQ (C# 3.0+)",id:"extension-methods-with-linq-c-30",level:3},{value:"Delegates and Anonymous Methods (C# 2.0+)",id:"delegates-and-anonymous-methods-c-20",level:3},{value:"Events and Event Handlers (C# 2.0+)",id:"events-and-event-handlers-c-20",level:3},{value:"Custom Events and Event Arguments (C# 2.0+)",id:"custom-events-and-event-arguments-c-20",level:3},{value:"Delegates and Multicast Delegates (C# 2.0+)",id:"delegates-and-multicast-delegates-c-20",level:3},{value:"Asynchronous Programming with async/await (C# 5.0+)",id:"asynchronous-programming-with-asyncawait-c-50",level:3},{value:"Asynchronous Streams (C# 8.0+)",id:"asynchronous-streams-c-80",level:3},{value:"Value Tuples (C# 7.0+)",id:"value-tuples-c-70",level:3},{value:"Pattern Matching (C# 7.0+)",id:"pattern-matching-c-70",level:3},{value:"Discards (C# 7.0+)",id:"discards-c-70",level:3},{value:"Null Conditional Operator (C# 6.0+)",id:"null-conditional-operator-c-60",level:3},{value:"Expression-Bodied Members (C# 6.0+)",id:"expression-bodied-members-c-60",level:3},{value:"Tuple Deconstruction (C# 7.0+)",id:"tuple-deconstruction-c-70",level:3},{value:"C# Records (C# 9.0+)",id:"c-records-c-90",level:3},{value:"Interpolated Strings (C# 6.0+)",id:"interpolated-strings-c-60",level:3},{value:"C# 8.0 Nullable Reference Types",id:"c-80-nullable-reference-types",level:3},{value:"Using Statements with IDisposable (C# 8.0+)",id:"using-statements-with-idisposable-c-80",level:3},{value:"Asynchronous Disposal (C# 8.0+)",id:"asynchronous-disposal-c-80",level:3}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"c"},"C#"),(0,s.kt)("h3",{id:"hello-world"},"Hello World"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nclass Program {\n    static void Main() {\n        Console.WriteLine("Hello, World!");\n    }\n}\n')),(0,s.kt)("h3",{id:"variables"},"Variables"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'int age = 30;\nstring name = "John";\nbool isAlive = true;\n')),(0,s.kt)("h3",{id:"user-input"},"User Input"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'Console.Write("Enter something: ");\nstring userInput = Console.ReadLine();\n')),(0,s.kt)("h3",{id:"if-else-statement"},"If-else Statement"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'if (age >= 18) {\n    Console.WriteLine("You are an adult.");\n} else {\n    Console.WriteLine("You are a minor.");\n}\n')),(0,s.kt)("h3",{id:"for-loop"},"For loop"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"for (int i = 0; i < 5; i++) {\n    Console.WriteLine(i);\n}\n")),(0,s.kt)("h3",{id:"while-loop"},"While loop"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"int count = 0;\nwhile (count < 5) {\n    Console.WriteLine(count);\n    count++;\n}\n")),(0,s.kt)("h3",{id:"arrays"},"Arrays"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'int[] numbers = { 1, 2, 3, 4, 5 };\nstring[] names = { "John", "Mary", "Bob" };\n')),(0,s.kt)("h3",{id:"array-access"},"Array access"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"int firstNumber = numbers[0];\n")),(0,s.kt)("h3",{id:"functions"},"Functions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"int Add(int a, int b) {\n    return a + b;\n}\n")),(0,s.kt)("h3",{id:"object-oriented-programming"},"Object oriented programming"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'class Person {\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public void Greet() {\n        Console.WriteLine($"Hello, my name is {Name}.");\n    }\n}\n')),(0,s.kt)("h3",{id:"constructors-and-object-initialization"},"Constructors and object initialization"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"class Person {\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public Person(string name, int age) {\n        Name = name;\n        Age = age;\n    }\n}\n")),(0,s.kt)("h3",{id:"inheritance"},"Inheritance"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"class Student : Person {\n    public string School { get; set; }\n}\n")),(0,s.kt)("h3",{id:"lists-systemcollectionsgenericlist"},"Lists (System.Collections.Generic.List)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System.Collections.Generic;\nList<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\n")),(0,s.kt)("h3",{id:"list-operations-add-remove"},"List Operations (Add, Remove)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"numbers.Add(6);\nnumbers.Remove(3);\n")),(0,s.kt)("h3",{id:"list-iteration-foreach"},"List Iteration (foreach)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"foreach (int num in numbers) {\n    Console.WriteLine(num);\n}\n")),(0,s.kt)("h3",{id:"dictionaries-systemcollectionsgenericdictionary"},"Dictionaries (System.Collections.Generic.Dictionary)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nDictionary<string, int> scores = new Dictionary<string, int>();\nscores["Alice"] = 95;\n')),(0,s.kt)("h3",{id:"dictionary-access-and-iteration"},"Dictionary access and iteration"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'foreach (var pair in scores) {\n    Console.WriteLine($"{pair.Key}: {pair.Value}");\n}\n')),(0,s.kt)("h3",{id:"string-manipulation"},"String manipulation"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'string text = "Hello, World!";\nstring upperText = text.ToUpper();\n')),(0,s.kt)("h3",{id:"string-splitting"},"String splitting"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"string[] words = text.Split(new char[] { ' ', ',' });\n")),(0,s.kt)("h3",{id:"string-joining"},"String Joining"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'string[] words = { "Hello", "World" };\nstring joinedText = string.Join(" ", words);\n')),(0,s.kt)("h3",{id:"datetime-systemdatetime"},"DateTime (System.DateTime)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"DateTime currentDate = DateTime.Now;\n")),(0,s.kt)("h3",{id:"datetime-formatting"},"DateTime Formatting"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'string formattedDate = currentDate.ToString("yyyy-MM-dd");\n')),(0,s.kt)("h3",{id:"exception-handling"},"Exception handling"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'try {\n    int result = 10 / 0;\n} catch (DivideByZeroException e) {\n    Console.WriteLine("Error: " + e.Message);\n}\n\n### File Reading\n```csharp\nusing System.IO;\nstring content = File.ReadAllText("example.txt");\n')),(0,s.kt)("h3",{id:"file-writing"},"File Writing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.IO;\nFile.WriteAllText("output.txt", "This is some text.");\n')),(0,s.kt)("h3",{id:"working-with-enums"},"Working with Enums"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"enum DaysOfWeek {\n    Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\n}\n")),(0,s.kt)("h3",{id:"enumparse"},"Enum.Parse"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'DaysOfWeek day = (DaysOfWeek)Enum.Parse(typeof(DaysOfWeek), "Wednesday");\n')),(0,s.kt)("h3",{id:"linq-language-integrated-query"},"LINQ (Language-Integrated Query)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System.Linq;\nint[] numbers = { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n => n % 2 == 0);\n")),(0,s.kt)("h3",{id:"linq-select-projection"},"LINQ (Select Projection)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System.Linq;\nint[] numbers = { 1, 2, 3, 4, 5 };\nvar squaredNumbers = numbers.Select(n => n * n);\n")),(0,s.kt)("h3",{id:"linq-ordering"},"LINQ (Ordering)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"}," using System.Linq;\nint[] numbers = { 5, 2, 9, 1, 3 };\nvar sortedNumbers = numbers.OrderBy(n => n);\n")),(0,s.kt)("h3",{id:"linq-grouping"},"LINQ (Grouping)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Linq;\nstring[] fruits = { "apple", "banana", "cherry", "date", "fig" };\nvar groupedByLength = fruits.GroupBy(fruit => fruit.Length);\n')),(0,s.kt)("h3",{id:"linq-joining"},"LINQ (Joining)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Linq;\nvar users = new[] { new { ID = 1, Name = "Alice" }, new { ID = 2, Name = "Bob" } };\nvar orders = new[] { new { UserID = 1, Product = "Apple" }, new { UserID = 2, Product = "Banana" } };\nvar joinedData = users.Join(orders, user => user.ID, order => order.UserID, (user, order) => new { user.Name, order.Product });\n')),(0,s.kt)("h3",{id:"delegates-and-events"},"Delegates and Events"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public delegate void MyEventHandler(object sender, EventArgs e);\npublic event MyEventHandler MyEvent;\n")),(0,s.kt)("h3",{id:"custom-delegates-and-event-handlers"},"Custom delegates and event handlers"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public delegate int CalculationDelegate(int a, int b);\npublic int Add(int a, int b) {\n    return a + b;\n}\nCalculationDelegate calc = Add;\nint result = calc(5, 3);\n")),(0,s.kt)("h3",{id:"asynchronous-programming-asyncawait"},"Asynchronous Programming (async/await)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Threading.Tasks;\nasync Task<int> LongRunningOperationAsync() {\n    await Task.Delay(2000);\n    return 42;\n}\n")),(0,s.kt)("h3",{id:"asyncawait-error-handling"},"Async/Await Error Handling"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'try {\n    int result = await LongRunningOperationAsync();\n    Console.WriteLine(result);\n} catch (Exception ex) {\n    Console.WriteLine("Error: " + ex.Message);\n}\n')),(0,s.kt)("h3",{id:"attributes-and-reflection"},"Attributes and Reflection"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"[Serializable]\npublic class MyClass { }\nType type = typeof(MyClass);\nAttribute[] attributes = Attribute.GetCustomAttributes(type);\n")),(0,s.kt)("h3",{id:"working-with-nullable-types"},"Working with Nullable Types"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"int? nullableInt = null;\nif (nullableInt.HasValue) {\n    int value = nullableInt.Value;\n}\n")),(0,s.kt)("h3",{id:"extension-methods"},"Extension Methods"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class StringExtensions {\n    public static bool IsPalindrome(this string str) {\n        // Check if the string is a palindrome\n    }\n}\n")),(0,s.kt)("h3",{id:"idisposable-and-using"},"IDisposable and using"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using (var resource = new DisposableResource()) {\n    // Use the resource\n}\n")),(0,s.kt)("h3",{id:"interoperability-with-unmanaged-code-dllimport"},"Interoperability with Unmanaged Code (DllImport)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Runtime.InteropServices;\n[DllImport("user32.dll")]\nstatic extern bool SetWindowText(IntPtr hWnd, string lpString);\n')),(0,s.kt)("h3",{id:"lambda-expressions-with-linq-c-30"},"Lambda Expressions with LINQ (C# 3.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Linq;\nvar numbers = new[] { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n => n % 2 == 0);\n")),(0,s.kt)("h3",{id:"linq-query-syntax-c-30"},"LINQ Query Syntax (C# 3.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Linq;\nvar numbers = new[] { 1, 2, 3, 4, 5 };\nvar evenNumbers = from num in numbers where num % 2 == 0 select num;\n")),(0,s.kt)("h3",{id:"extension-methods-with-linq-c-30"},"Extension Methods with LINQ (C# 3.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Linq;\npublic static class EnumerableExtensions {\n    public static int CustomSum(this IEnumerable<int> source) {\n        int sum = 0;\n        foreach (int num in source) {\n            sum += num;\n        }\n        return sum;\n    }\n}\nvar numbers = new[] { 1, 2, 3, 4, 5 };\nint sum = numbers.CustomSum();\n")),(0,s.kt)("h3",{id:"delegates-and-anonymous-methods-c-20"},"Delegates and Anonymous Methods (C# 2.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'public delegate void MyDelegate(string message);\npublic static void DisplayMessage(string message) {\n    Console.WriteLine(message);\n}\nMyDelegate del = DisplayMessage;\ndel("Hello, delegate!");\n')),(0,s.kt)("h3",{id:"events-and-event-handlers-c-20"},"Events and Event Handlers (C# 2.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'public class EventPublisher {\n    public event EventHandler MyEvent;\n    public void RaiseEvent() {\n        MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\npublic class EventSubscriber {\n    public void Subscribe(EventPublisher publisher) {\n        publisher.MyEvent += HandleEvent;\n    }\n    private void HandleEvent(object sender, EventArgs e) {\n        Console.WriteLine("Event handled.");\n    }\n}\n')),(0,s.kt)("h3",{id:"custom-events-and-event-arguments-c-20"},"Custom Events and Event Arguments (C# 2.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'public class CustomEventArgs : EventArgs {\n    public string Message { get; }\n    public CustomEventArgs(string message) {\n        Message = message;\n    }\n}\npublic class CustomEventPublisher {\n    public event EventHandler<CustomEventArgs> CustomEvent;\n    public void RaiseCustomEvent() {\n        CustomEvent?.Invoke(this, new CustomEventArgs("Custom event raised."));\n    }\n}\npublic class CustomEventSubscriber {\n    public void Subscribe(CustomEventPublisher publisher) {\n        publisher.CustomEvent += HandleCustomEvent;\n    }\n    private void HandleCustomEvent(object sender, CustomEventArgs e) {\n        Console.WriteLine("Custom event handled: " + e.Message);\n    }\n}\n')),(0,s.kt)("h3",{id:"delegates-and-multicast-delegates-c-20"},"Delegates and Multicast Delegates (C# 2.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'public delegate void MathOperation(int a, int b);\npublic static void Add(int a, int b) {\n    Console.WriteLine("Addition: " + (a + b));\n}\npublic static void Subtract(int a, int b) {\n    Console.WriteLine("Subtraction: " + (a - b));\n}\nMathOperation mathDel = Add;\nmathDel += Subtract;\nmathDel(10, 5); // Calls both Add and Subtract\n')),(0,s.kt)("h3",{id:"asynchronous-programming-with-asyncawait-c-50"},"Asynchronous Programming with async/await (C# 5.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Threading.Tasks;\nasync Task<int> LongRunningOperationAsync() {\n    await Task.Delay(2000);\n    return 42;\n}\nasync Task Main() {\n    int result = await LongRunningOperationAsync();\n    Console.WriteLine(result);\n}\n")),(0,s.kt)("h3",{id:"asynchronous-streams-c-80"},"Asynchronous Streams (C# 8.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nasync IAsyncEnumerable<int> GenerateNumbersAsync() {\n    for (int i = 0; i < 5; i++) {\n        await Task.Delay(1000);\n        yield return i;\n    }\n}\nawait foreach (var number in GenerateNumbersAsync()) {\n    Console.WriteLine(number);\n}\n")),(0,s.kt)("h3",{id:"value-tuples-c-70"},"Value Tuples (C# 7.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var person = ("Alice", 25);\nConsole.WriteLine($"Name: {person.Item1}, Age: {person.Item2}");\n')),(0,s.kt)("h3",{id:"pattern-matching-c-70"},"Pattern Matching (C# 7.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'object data = "Hello, World!";\nif (data is string text) {\n    Console.WriteLine($"Length: {text.Length}");\n}\n')),(0,s.kt)("h3",{id:"discards-c-70"},"Discards (C# 7.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"_ = PerformOperation();\n")),(0,s.kt)("h3",{id:"null-conditional-operator-c-60"},"Null Conditional Operator (C# 6.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"string name = person?.Name;\n")),(0,s.kt)("h3",{id:"expression-bodied-members-c-60"},"Expression-Bodied Members (C# 6.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Calculator {\n    public int Add(int a, int b) => a + b;\n}\n")),(0,s.kt)("h3",{id:"tuple-deconstruction-c-70"},"Tuple Deconstruction (C# 7.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"var (x, y) = GetCoordinates();\n")),(0,s.kt)("h3",{id:"c-records-c-90"},"C# Records (C# 9.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'public record Person(string Name, int Age);\nvar person1 = new Person("Alice", 25);\nvar person2 = new Person("Alice", 25);\nbool areEqual = person1 == person2;\n')),(0,s.kt)("h3",{id:"interpolated-strings-c-60"},"Interpolated Strings (C# 6.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'string name = "Alice";\nint age = 25;\nConsole.WriteLine($"Name: {name}, Age: {age}");\n')),(0,s.kt)("h3",{id:"c-80-nullable-reference-types"},"C# 8.0 Nullable Reference Types"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'#nullable enable\nstring? nullableString = null;\nstring nonNullableString = "Hello, World!";\n')),(0,s.kt)("h3",{id:"using-statements-with-idisposable-c-80"},"Using Statements with IDisposable (C# 8.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using var disposableResource = new DisposableResource();\n// Resource is automatically disposed when leaving this block\n")),(0,s.kt)("h3",{id:"asynchronous-disposal-c-80"},"Asynchronous Disposal (C# 8.0+)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"await using var asyncDisposable = new AsyncDisposableResource();\nawait asyncDisposable.DisposeAsync();\n")))}d.isMDXComponent=!0}}]);