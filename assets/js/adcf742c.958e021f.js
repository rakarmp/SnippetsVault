"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2682],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,g=u["".concat(o,".").concat(c)]||u[c]||m[c]||l;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6181:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const l={},i="Perl",s={unversionedId:"perl_snippets",id:"perl_snippets",title:"Perl",description:"Hello World",source:"@site/docs/perl_snippets.md",sourceDirName:".",slug:"/perl_snippets",permalink:"/SnippetsVault/docs/perl_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/perl_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kotlin",permalink:"/SnippetsVault/docs/kotlin_snippets"},next:{title:"PHP",permalink:"/SnippetsVault/docs/php_snippets"}},o={},p=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables",id:"variables",level:3},{value:"User Input",id:"user-input",level:3},{value:"Comments",id:"comments",level:3},{value:"If-Else",id:"if-else",level:3},{value:"For Loop",id:"for-loop",level:3},{value:"While Loop",id:"while-loop",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Hashes",id:"hashes",level:3},{value:"Subroutines",id:"subroutines",level:3},{value:"File Input/Output",id:"file-inputoutput",level:3},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Splitting Strings",id:"splitting-strings",level:3},{value:"Joining Strings",id:"joining-strings",level:3},{value:"Reading Command Line Arguments",id:"reading-command-line-arguments",level:3},{value:"Getting the current date and time",id:"getting-the-current-date-and-time",level:3},{value:"Mathemathical Operations",id:"mathemathical-operations",level:3},{value:"Sorting Arrays",id:"sorting-arrays",level:3},{value:"Removing Duplicates from Arrays",id:"removing-duplicates-from-arrays",level:3},{value:"Checking if a file exists",id:"checking-if-a-file-exists",level:3},{value:"Creating a directory",id:"creating-a-directory",level:3},{value:"Deleting a file",id:"deleting-a-file",level:3},{value:"String concatenation",id:"string-concatenation",level:3},{value:"String length",id:"string-length",level:3},{value:"Reading Environment Variables",id:"reading-environment-variables",level:3},{value:"Working with Dates",id:"working-with-dates",level:3},{value:"Executing external commands",id:"executing-external-commands",level:3},{value:"Random Number Generation",id:"random-number-generation",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Using modules",id:"using-modules",level:3},{value:"Sending email (with NET::SMTP)",id:"sending-email-with-netsmtp",level:3},{value:"Working with JSON (JSON module)",id:"working-with-json-json-module",level:3},{value:"Multiline Strings",id:"multiline-strings",level:3},{value:"Fetching URL Content (with LWP::Simple)",id:"fetching-url-content-with-lwpsimple",level:3},{value:"URL Encoding/Dencoding",id:"url-encodingdencoding",level:3},{value:"Reading and writing CSV files (with Text::CSV)",id:"reading-and-writing-csv-files-with-textcsv",level:3},{value:"HTTP Server (with HTTP::Server::Simple)",id:"http-server-with-httpserversimple",level:3},{value:"Calculating Hash digesets (with Digest::MD5)",id:"calculating-hash-digesets-with-digestmd5",level:3},{value:"XML Parsing (with XML::LibXML)",id:"xml-parsing-with-xmllibxml",level:3},{value:"Database Interaction (with DBI)",id:"database-interaction-with-dbi",level:3},{value:"Object Oriented Programming",id:"object-oriented-programming",level:3},{value:"Exception Handling with Try::Tiny",id:"exception-handling-with-trytiny",level:3},{value:"Multithreading (with threads)",id:"multithreading-with-threads",level:3},{value:"Using regular expression capture groups",id:"using-regular-expression-capture-groups",level:3},{value:"File upload handler (with CGI)",id:"file-upload-handler-with-cgi",level:3},{value:"Using DBIx::Class for Database ORM",id:"using-dbixclass-for-database-orm",level:3},{value:"Working with DateTime Objects",id:"working-with-datetime-objects",level:3},{value:"Sending HTTP Requests (with LWP::UserAgent)",id:"sending-http-requests-with-lwpuseragent",level:3},{value:"Creating RESTful APIs (with Dancer2)",id:"creating-restful-apis-with-dancer2",level:3},{value:"Parsing Command Line Arguments (with Getopt::Long)",id:"parsing-command-line-arguments-with-getoptlong",level:3},{value:"Template Processing (with Template::Toolkit)",id:"template-processing-with-templatetoolkit",level:3},{value:"Asynchronous Programming (with Mojo::IOLoop)",id:"asynchronous-programming-with-mojoioloop",level:3},{value:"Handling Binary Data (with Encode)",id:"handling-binary-data-with-encode",level:3},{value:"Creating custom exception classes",id:"creating-custom-exception-classes",level:3},{value:"Database Transactions (with DBIx::Class)",id:"database-transactions-with-dbixclass",level:3},{value:"Using Moose for Object Oriented Programming",id:"using-moose-for-object-oriented-programming",level:3},{value:"Creating custom modules",id:"creating-custom-modules",level:3},{value:"Parsing JSON with Error Handling (with JSON::MaybeXS)",id:"parsing-json-with-error-handling-with-jsonmaybexs",level:3},{value:"Web Scraping (with Mojo::UserAgent)",id:"web-scraping-with-mojouseragent",level:3},{value:"Creating a RESTful API (with Mojolicious)",id:"creating-a-restful-api-with-mojolicious",level:3}],d={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"perl"},"Perl"),(0,r.kt)("h3",{id:"hello-world"},"Hello World"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'print "Hello, World!\\n";\n')),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'my $variable = "Value";\n')),(0,r.kt)("h3",{id:"user-input"},"User Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'print "Enter something: ";\nmy $input = <STDIN>;\nchomp($input); # Remove newline\n')),(0,r.kt)("h3",{id:"comments"},"Comments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"# This is a comment\n")),(0,r.kt)("h3",{id:"if-else"},"If-Else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"if ($condition) {\n    # Code to execute if condition is true\n} else {\n    # Code to execute if condition is false\n}\n")),(0,r.kt)("h3",{id:"for-loop"},"For Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"for my $i (1..10) {\n    # Code to repeat 10 times\n}\n")),(0,r.kt)("h3",{id:"while-loop"},"While Loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"while ($condition) {\n    # Code to execute while condition is true\n}\n")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my @array = (1, 2, 3);\n")),(0,r.kt)("h3",{id:"hashes"},"Hashes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my %hash = ('key1' => 'value1', 'key2' => 'value2');\n")),(0,r.kt)("h3",{id:"subroutines"},"Subroutines"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"sub my_function {\n    my ($arg1, $arg2) = @_;\n    # Code to execute\n}\n")),(0,r.kt)("h3",{id:"file-inputoutput"},"File Input/Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"open my $file, '<', 'filename.txt' or die \"Couldn't open file: $!\";\nwhile (my $line = <$file>) {\n    chomp($line);\n    # Process each line\n}\nclose $file;\n")),(0,r.kt)("h3",{id:"regular-expressions"},"Regular Expressions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"if ($string =~ /pattern/) {\n    # Match found\n}\n")),(0,r.kt)("h3",{id:"splitting-strings"},"Splitting Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my @words = split(' ', $string);\n")),(0,r.kt)("h3",{id:"joining-strings"},"Joining Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $new_string = join(', ', @array);\n")),(0,r.kt)("h3",{id:"reading-command-line-arguments"},"Reading Command Line Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $arg1 = $ARGV[0];\n")),(0,r.kt)("h3",{id:"getting-the-current-date-and-time"},"Getting the current date and time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'use POSIX qw(strftime);\nmy $timestamp = strftime("%Y-%m-%d %H:%M:%S", localtime);\n')),(0,r.kt)("h3",{id:"mathemathical-operations"},"Mathemathical Operations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $result = $num1 + $num2;\n")),(0,r.kt)("h3",{id:"sorting-arrays"},"Sorting Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my @sorted_array = sort @array;\n")),(0,r.kt)("h3",{id:"removing-duplicates-from-arrays"},"Removing Duplicates from Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my %seen;\nmy @unique_array = grep { !$seen{$_}++ } @array;\n")),(0,r.kt)("h3",{id:"checking-if-a-file-exists"},"Checking if a file exists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"if (-e 'filename.txt') {\n    # File exists\n}\n")),(0,r.kt)("h3",{id:"creating-a-directory"},"Creating a directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"mkdir 'new_directory';\n")),(0,r.kt)("h3",{id:"deleting-a-file"},"Deleting a file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"unlink 'file_to_delete.txt';\n")),(0,r.kt)("h3",{id:"string-concatenation"},"String concatenation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $new_string = $string1 . $string2;\n")),(0,r.kt)("h3",{id:"string-length"},"String length"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $length = length($string);\n")),(0,r.kt)("h3",{id:"reading-environment-variables"},"Reading Environment Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $value = $ENV{'VAR_NAME'};\n")),(0,r.kt)("h3",{id:"working-with-dates"},"Working with Dates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Date::Calc qw(Today Add_Delta_Days);\nmy ($year, $month, $day) = Today();\nmy ($new_year, $new_month, $new_day) = Add_Delta_Days($year, $month, $day, 7);\n")),(0,r.kt)("h3",{id:"executing-external-commands"},"Executing external commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $output = `ls -l`;\n")),(0,r.kt)("h3",{id:"random-number-generation"},"Random Number Generation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $random_number = int(rand(100));\n")),(0,r.kt)("h3",{id:"error-handling"},"Error Handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"eval {\n    # Code that might throw an exception\n};\nif ($@) {\n    # Handle the exception\n}\n")),(0,r.kt)("h3",{id:"using-modules"},"Using modules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Module::Name;\n")),(0,r.kt)("h3",{id:"sending-email-with-netsmtp"},"Sending email (with NET::SMTP)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Net::SMTP;\n\nmy $smtp = Net::SMTP->new('smtp.example.com');\n$smtp->mail('sender@example.com');\n$smtp->to('recipient@example.com');\n$smtp->data();\n$smtp->datasend(\"Subject: Test Email\\n\");\n$smtp->datasend(\"Hello, this is a test email.\\n\");\n$smtp->dataend();\n$smtp->quit;\n")),(0,r.kt)("h3",{id:"working-with-json-json-module"},"Working with JSON (JSON module)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'use JSON;\n\nmy $json_text = \'{"key":"value"}\';\nmy $data = decode_json($json_text);\n')),(0,r.kt)("h3",{id:"multiline-strings"},"Multiline Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'my $multiline = <<"END_TEXT";\nThis is a\nmultiline string.\nEND_TEXT\n')),(0,r.kt)("h3",{id:"fetching-url-content-with-lwpsimple"},"Fetching URL Content (with LWP::Simple)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use LWP::Simple;\n\nmy $content = get('https://example.com');\n")),(0,r.kt)("h3",{id:"url-encodingdencoding"},"URL Encoding/Dencoding"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use URI::Escape;\n\nmy $encoded = uri_escape($string);\nmy $decoded = uri_unescape($encoded);\n")),(0,r.kt)("h3",{id:"reading-and-writing-csv-files-with-textcsv"},"Reading and writing CSV files (with Text::CSV)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Text::CSV;\n\nmy $csv = Text::CSV->new({ binary => 1 });\nopen my $file, '<', 'data.csv' or die \"Couldn't open file: $!\";\nwhile (my $row = $csv->getline($file)) {\n    # Process each row\n}\nclose $file;\n")),(0,r.kt)("h3",{id:"http-server-with-httpserversimple"},"HTTP Server (with HTTP::Server::Simple)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use HTTP::Server::Simple;\nuse base qw(HTTP::Server::Simple::CGI);\n\nsub handle_request {\n    # Handle HTTP requests\n}\n\nmy $server = MyWebServer->new;\n$server->run();\n")),(0,r.kt)("h3",{id:"calculating-hash-digesets-with-digestmd5"},"Calculating Hash digesets (with Digest::MD5)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Digest::MD5;\n\nmy $digest = Digest::MD5->new;\n$digest->add('data_to_hash');\nmy $hash = $digest->hexdigest;\n")),(0,r.kt)("h3",{id:"xml-parsing-with-xmllibxml"},"XML Parsing (with XML::LibXML)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use XML::LibXML;\n\nmy $parser = XML::LibXML->new;\nmy $doc = $parser->parse_file('data.xml');\n")),(0,r.kt)("h3",{id:"database-interaction-with-dbi"},"Database Interaction (with DBI)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use DBI;\n\nmy $dbh = DBI->connect('dbi:SQLite:dbname=database.db', '', '', { RaiseError => 1 });\nmy $sth = $dbh->prepare('SELECT * FROM table');\n$sth->execute();\nwhile (my $row = $sth->fetchrow_hashref()) {\n    # Process database rows\n}\n$sth->finish();\n$dbh->disconnect();\n")),(0,r.kt)("h3",{id:"object-oriented-programming"},"Object Oriented Programming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"package MyClass;\n\nsub new {\n    my ($class, $data) = @_;\n    my $self = { data => $data };\n    bless $self, $class;\n    return $self;\n}\n\nsub get_data {\n    my ($self) = @_;\n    return $self->{data};\n}\n\nmy $obj = MyClass->new('Some data');\nprint $obj->get_data();\n")),(0,r.kt)("h3",{id:"exception-handling-with-trytiny"},"Exception Handling with Try::Tiny"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'use Try::Tiny;\n\ntry {\n    # Code that might throw an exception\n}\ncatch {\n    warn "An error occurred: $_";\n};\n')),(0,r.kt)("h3",{id:"multithreading-with-threads"},"Multithreading (with threads)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use threads;\n\nmy @threads;\nforeach my $i (1..5) {\n    push @threads, threads->create(\\&subroutine, $i);\n}\n$_->join() foreach @threads;\n")),(0,r.kt)("h3",{id:"using-regular-expression-capture-groups"},"Using regular expression capture groups"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'my $string = "Date: 2023-09-05";\nif ($string =~ /Date: (\\d{4}-\\d{2}-\\d{2})/) {\n    my $date = $1;\n    print "Captured date: $date\\n";\n}\n')),(0,r.kt)("h3",{id:"file-upload-handler-with-cgi"},"File upload handler (with CGI)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use CGI;\n\nmy $cgi = CGI->new;\nmy $file = $cgi->upload('file_field_name');\nif ($file) {\n    my $filename = $cgi->param('file_field_name');\n    open my $fh, '>', $filename or die \"Couldn't open file: $!\";\n    while (my $chunk = $file->getline()) {\n        print $fh $chunk;\n    }\n    close $fh;\n}\n")),(0,r.kt)("h3",{id:"using-dbixclass-for-database-orm"},"Using DBIx::Class for Database ORM"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use DBIx::Class;\n\nmy $schema = DBIx::Class::Schema->connect('dbi:SQLite:dbname=database.db');\nmy $resultset = $schema->resultset('Table');\nmy $row = $resultset->find(1);\nprint $row->column_name;\n")),(0,r.kt)("h3",{id:"working-with-datetime-objects"},"Working with DateTime Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'use DateTime;\n\nmy $dt = DateTime->now;\n$dt->add(days => 7);\nprint $dt->strftime("%Y-%m-%d %H:%M:%S");\n')),(0,r.kt)("h3",{id:"sending-http-requests-with-lwpuseragent"},"Sending HTTP Requests (with LWP::UserAgent)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use LWP::UserAgent;\n\nmy $ua = LWP::UserAgent->new;\nmy $response = $ua->get('https://example.com');\nif ($response->is_success) {\n    my $content = $response->content;\n}\n")),(0,r.kt)("h3",{id:"creating-restful-apis-with-dancer2"},"Creating RESTful APIs (with Dancer2)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Dancer2;\n\nget '/api/resource/:id' => sub {\n    my $id = route_parameters->get('id');\n    # Fetch and return resource with ID $id\n};\n\nstart;\n")),(0,r.kt)("h3",{id:"parsing-command-line-arguments-with-getoptlong"},"Parsing Command Line Arguments (with Getopt::Long)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Getopt::Long;\n\nmy $input_file;\nmy $output_file;\nGetOptions(\n    'input=s'  => \\$input_file,\n    'output=s' => \\$output_file,\n);\n\nprint \"Input file: $input_file\\n\";\nprint \"Output file: $output_file\\n\";\n")),(0,r.kt)("h3",{id:"template-processing-with-templatetoolkit"},"Template Processing (with Template::Toolkit)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Template;\n\nmy $template = Template->new;\nmy $vars = { name => 'John', age => 30 };\n$template->process('template.tt', $vars) || die $template->error();\n")),(0,r.kt)("h3",{id:"asynchronous-programming-with-mojoioloop"},"Asynchronous Programming (with Mojo::IOLoop)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"\nuse Mojo::IOLoop;\n\nMojo::IOLoop->delay(\n    sub {\n        my $delay = shift;\n        # Asynchronous code here\n        $delay->pass('Result');\n    },\n    sub {\n        my ($delay, $result) = @_;\n        # Handle the result\n    },\n)->wait;\n")),(0,r.kt)("h3",{id:"handling-binary-data-with-encode"},"Handling Binary Data (with Encode)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Encode;\n\nmy $encoded_data = encode_base64($binary_data);\nmy $decoded_data = decode_base64($encoded_data);\n")),(0,r.kt)("h3",{id:"creating-custom-exception-classes"},"Creating custom exception classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'package MyException;\nuse base \'Exception::Class\';\n\npackage main;\nuse Try::Tiny;\n\ntry {\n    MyException->throw("Custom exception message");\n}\ncatch {\n    if (MyException->caught($_)) {\n        warn "Caught custom exception: $_\\n";\n    }\n};\n')),(0,r.kt)("h3",{id:"database-transactions-with-dbixclass"},"Database Transactions (with DBIx::Class)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"my $schema = DBIx::Class::Schema->connect('dbi:SQLite:dbname=database.db');\nmy $txn = $schema->txn_scope;\n# Perform database operations within the transaction\n$txn->commit; # or $txn->rollback;\n")),(0,r.kt)("h3",{id:"using-moose-for-object-oriented-programming"},"Using Moose for Object Oriented Programming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"package MyClass;\nuse Moose;\n\nhas 'data' => (is => 'ro', isa => 'Str');\n\nsub print_data {\n    my ($self) = @_;\n    print $self->data;\n}\n\nmy $obj = MyClass->new(data => 'Some data');\n$obj->print_data();\n")),(0,r.kt)("h3",{id:"creating-custom-modules"},"Creating custom modules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"package MyModule;\n\nsub new {\n    my ($class) = @_;\n    my $self = {};\n    bless $self, $class;\n    return $self;\n}\n\nsub do_something {\n    my ($self) = @_;\n    # Code here\n}\n\n1; # Required for modules\n\n# In another script\nuse MyModule;\nmy $module = MyModule->new();\n$module->do_something();\n")),(0,r.kt)("h3",{id:"parsing-json-with-error-handling-with-jsonmaybexs"},"Parsing JSON with Error Handling (with JSON::MaybeXS)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},'use JSON::MaybeXS;\n\nmy $json_text = \'{"key": "value"}\';\nmy $data;\neval {\n    $data = decode_json($json_text);\n};\nif ($@) {\n    die "Error decoding JSON: $@";\n}\n')),(0,r.kt)("h3",{id:"web-scraping-with-mojouseragent"},"Web Scraping (with Mojo::UserAgent)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Mojo::UserAgent;\n\nmy $ua = Mojo::UserAgent->new;\nmy $dom = $ua->get('https://example.com')->result->dom;\nmy $title = $dom->at('title')->text;\n")),(0,r.kt)("h3",{id:"creating-a-restful-api-with-mojolicious"},"Creating a RESTful API (with Mojolicious)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-perl"},"use Mojolicious::Lite;\n\nget '/api/resource/:id' => sub {\n    my $c = shift;\n    my $id = $c->param('id');\n    $c->render(json => { id => $id, data => 'Resource data' });\n};\n\napp->start;\n")))}m.isMDXComponent=!0}}]);