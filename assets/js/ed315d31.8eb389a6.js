"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return t?a.createElement(f,s(s({ref:n},c),{},{components:t})):a.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<l;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const l={},s="Rust",i={unversionedId:"rust_snippets",id:"rust_snippets",title:"Rust",description:"Hello World",source:"@site/docs/rust_snippets.md",sourceDirName:".",slug:"/rust_snippets",permalink:"/docs/rust_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ruby",permalink:"/docs/ruby_snippets"},next:{title:"Scala",permalink:"/docs/scala_snippets"}},o={},u=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables and constants",id:"variables-and-constants",level:3},{value:"Data types",id:"data-types",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Vectors",id:"vectors",level:3},{value:"Conditional statements",id:"conditional-statements",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Functions",id:"functions",level:3},{value:"Option and result",id:"option-and-result",level:3},{value:"Pattern matching",id:"pattern-matching",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Structs",id:"structs",level:3},{value:"Ownership and borrowing",id:"ownership-and-borrowing",level:3},{value:"References and lifetimes",id:"references-and-lifetimes",level:3},{value:"Methods on structs",id:"methods-on-structs",level:3},{value:"Traits and implementations",id:"traits-and-implementations",level:3},{value:"Error handling with <code>Result</code>",id:"error-handling-with-result",level:3},{value:"Option and <code>unwrap</code>",id:"option-and-unwrap",level:3},{value:"Closures",id:"closures",level:3},{value:"Pattern matching with Enums",id:"pattern-matching-with-enums",level:3},{value:"File I/O",id:"file-io",level:3},{value:"Command line arguments",id:"command-line-arguments",level:3},{value:"Concurrency with Threads",id:"concurrency-with-threads",level:3},{value:"Mutexes and shared data",id:"mutexes-and-shared-data",level:3},{value:"Error handling with ? operator",id:"error-handling-with--operator",level:3},{value:"Traits and generic functions",id:"traits-and-generic-functions",level:3},{value:"Lifetimes in function signatures",id:"lifetimes-in-function-signatures",level:3},{value:"Unsafe code",id:"unsafe-code",level:3},{value:"Match expressions for exhaustive patterns",id:"match-expressions-for-exhaustive-patterns",level:3},{value:"Async/Await (Requires the async-std or tokio library)",id:"asyncawait-requires-the-async-std-or-tokio-library",level:3},{value:"Handling JSON with serde",id:"handling-json-with-serde",level:3},{value:"File downloads (with rocket web framework)",id:"file-downloads-with-rocket-web-framework",level:3},{value:"Web API (with Actix web framework)",id:"web-api-with-actix-web-framework",level:3},{value:"Working with Database (with Diesel ORM)",id:"working-with-database-with-diesel-orm",level:3},{value:"Unsafe Rust",id:"unsafe-rust",level:3},{value:"FFI (Foreign Function Interface)",id:"ffi-foreign-function-interface",level:3},{value:"Writing unit tests",id:"writing-unit-tests",level:3},{value:"Lifetime annotations",id:"lifetime-annotations",level:3},{value:"Advanced Pattern Matching",id:"advanced-pattern-matching",level:3},{value:"Option and result unwrapper",id:"option-and-result-unwrapper",level:3},{value:"Concurrency with async-std",id:"concurrency-with-async-std",level:3},{value:"Channels for concurrency",id:"channels-for-concurrency",level:3}],c={toc:u},d="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rust"},"Rust"),(0,r.kt)("h3",{id:"hello-world"},"Hello World"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    println!("Hello, World!");\n}\n')),(0,r.kt)("h3",{id:"variables-and-constants"},"Variables and constants"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let variable = 10;\nconst CONSTANT_VALUE: i32 = 5;\n")),(0,r.kt)("h3",{id:"data-types"},"Data types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let integer: i32 = 42;\nlet float: f64 = 3.14;\nlet character: char = 'A';\nlet boolean: bool = true;\n")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let fruits = ["Apple", "Banana", "Orange"];\n')),(0,r.kt)("h3",{id:"vectors"},"Vectors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut numbers = vec![1, 2, 3];\nnumbers.push(4);\n")),(0,r.kt)("h3",{id:"conditional-statements"},"Conditional statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'if age >= 18 {\n    println!("You are an adult.");\n} else {\n    println!("You are a minor.");\n}\n')),(0,r.kt)("h3",{id:"for-loop"},"For loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'for number in 1..=5 {\n    println!("{}", number);\n}\n')),(0,r.kt)("h3",{id:"while-loop"},"While loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut count = 0;\nwhile count < 5 {\n    println!("{}", count);\n    count += 1;\n}\n')),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn greet(name: &str) {\n    println!("Hello, {}!", name);\n}\n')),(0,r.kt)("h3",{id:"option-and-result"},"Option and result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let maybe_value: Option<i32> = Some(42);\nlet result: Result<i32, String> = Ok(42);\n")),(0,r.kt)("h3",{id:"pattern-matching"},"Pattern matching"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'match age {\n    0 => println!("You\'re a baby"),\n    1..=17 => println!("You\'re a minor"),\n    18..=64 => println!("You\'re an adult"),\n    _ => println!("You\'re a senior"),\n}\n')),(0,r.kt)("h3",{id:"enumerations"},"Enumerations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum Color {\n    Red,\n    Green,\n    Blue,\n}\nlet my_color = Color::Green;\n")),(0,r.kt)("h3",{id:"structs"},"Structs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct Point {\n    x: f64,\n    y: f64,\n}\nlet origin = Point { x: 0.0, y: 0.0 };\n")),(0,r.kt)("h3",{id:"ownership-and-borrowing"},"Ownership and borrowing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let s1 = String::from("Hello");\nlet s2 = s1.clone();\n')),(0,r.kt)("h3",{id:"references-and-lifetimes"},"References and lifetimes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    if s1.len() > s2.len() {\n        s1\n    } else {\n        s2\n    }\n}\n")),(0,r.kt)("h3",{id:"methods-on-structs"},"Methods on structs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl Point {\n    fn distance(&self, other: &Point) -> f64 {\n        ((self.x - other.x).powi(2) + (self.y - other.y).powi(2)).sqrt()\n    }\n}\n")),(0,r.kt)("h3",{id:"traits-and-implementations"},"Traits and implementations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"trait Shape {\n    fn area(&self) -> f64;\n}\n\nstruct Circle {\n    radius: f64,\n}\n\nimpl Shape for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * self.radius * self.radius\n    }\n}\n")),(0,r.kt)("h3",{id:"error-handling-with-result"},"Error handling with ",(0,r.kt)("inlineCode",{parentName:"h3"},"Result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn divide(a: i32, b: i32) -> Result<f64, String> {\n    if b == 0 {\n        return Err("Division by zero".to_string());\n    }\n    Ok(a as f64 / b as f64)\n}\n')),(0,r.kt)("h3",{id:"option-and-unwrap"},"Option and ",(0,r.kt)("inlineCode",{parentName:"h3"},"unwrap")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let result = some_option.unwrap_or_default();\n")),(0,r.kt)("h3",{id:"closures"},"Closures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let add_numbers = |a: i32, b: i32| -> i32 {\n    a + b\n};\nlet sum = add_numbers(5, 3);\n")),(0,r.kt)("h3",{id:"pattern-matching-with-enums"},"Pattern matching with Enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -> i32 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n")),(0,r.kt)("h3",{id:"file-io"},"File I/O"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fs::File;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut file = File::create("hello.txt")?;\n    file.write_all(b"Hello, Rust!")?;\n    Ok(())\n}\n')),(0,r.kt)("h3",{id:"command-line-arguments"},"Command line arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n    println!("{:?}", args);\n}\n')),(0,r.kt)("h3",{id:"concurrency-with-threads"},"Concurrency with Threads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        println!("Hello from the thread!");\n    });\n\n    handle.join().unwrap();\n}\n')),(0,r.kt)("h3",{id:"mutexes-and-shared-data"},"Mutexes and shared data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::{Arc, Mutex};\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!("Result: {}", *counter.lock().unwrap());\n}\n')),(0,r.kt)("h3",{id:"error-handling-with--operator"},"Error handling with ? operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fs::File;\nuse std::io::{self, Read};\n\nfn read_file() -> Result<String, io::Error> {\n    let mut file = File::open("file.txt")?;\n    let mut content = String::new();\n    file.read_to_string(&mut content)?;\n    Ok(content)\n}\n')),(0,r.kt)("h3",{id:"traits-and-generic-functions"},"Traits and generic functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"trait Printable {\n    fn print(&self);\n}\n\nfn print_all<T: Printable>(items: Vec<T>) {\n    for item in items {\n        item.print();\n    }\n}\n")),(0,r.kt)("h3",{id:"lifetimes-in-function-signatures"},"Lifetimes in function signatures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    if s1.len() > s2.len() {\n        s1\n    } else {\n        s2\n    }\n}\n")),(0,r.kt)("h3",{id:"unsafe-code"},"Unsafe code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"unsafe fn dangerous() {\n    // Unsafe code here\n}\n")),(0,r.kt)("h3",{id:"match-expressions-for-exhaustive-patterns"},"Match expressions for exhaustive patterns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let number = Some(7);\n    match number {\n        Some(1) => println!("One"),\n        Some(3) => println!("Three"),\n        Some(7) => println!("Seven"),\n        _ => println!("Other"),\n    }\n}\n')),(0,r.kt)("h3",{id:"asyncawait-requires-the-async-std-or-tokio-library"},"Async/Await (Requires the async-std or tokio library)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use async_std::task;\n\nasync fn async_function() {\n    // Async code here\n}\n\nfn main() {\n    task::block_on(async_function());\n}\n")),(0,r.kt)("h3",{id:"handling-json-with-serde"},"Handling JSON with serde"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize)]\nstruct Person {\n    name: String,\n    age: i32,\n}\n\nlet person = Person {\n    name: String::from("John"),\n    age: 30,\n};\nlet json = serde_json::to_string(&person).unwrap();\n')),(0,r.kt)("h3",{id:"file-downloads-with-rocket-web-framework"},"File downloads (with rocket web framework)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use rocket::tokio::fs::NamedFile;\n\n#[get("/download")]\nasync fn download() -> Option<NamedFile> {\n    NamedFile::open("file.txt").await.ok()\n}\n')),(0,r.kt)("h3",{id:"web-api-with-actix-web-framework"},"Web API (with Actix web framework)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use actix_web::{web, App, HttpServer, HttpResponse, Result};\n\nasync fn index() -> Result<HttpResponse> {\n    Ok(HttpResponse::Ok().body("Hello, Actix!"))\n}\n\n#[actix_rt::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new()\n            .route("/", web::get().to(index))\n    })\n    .bind("127.0.0.1:8080")?\n    .run()\n    .await\n}\n')),(0,r.kt)("h3",{id:"working-with-database-with-diesel-orm"},"Working with Database (with Diesel ORM)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use diesel::prelude::*;\n\n#[derive(Queryable)]\nstruct User {\n    id: i32,\n    name: String,\n}\n\nfn main() {\n    let connection = establish_connection();\n    let results = users.filter(name.eq("Alice"))\n        .load::<User>(&connection)\n        .expect("Error loading users");\n\n    for user in results {\n        println!("ID: {}, Name: {}", user.id, user.name);\n    }\n}\n')),(0,r.kt)("h3",{id:"unsafe-rust"},"Unsafe Rust"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"unsafe fn dangerous_function() {\n    // Unsafe code here\n}\n\nfn main() {\n    unsafe {\n        dangerous_function();\n    }\n}\n")),(0,r.kt)("h3",{id:"ffi-foreign-function-interface"},"FFI (Foreign Function Interface)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'extern "C" {\n    fn some_external_function();\n}\n\nfn main() {\n    unsafe {\n        some_external_function();\n    }\n}\n')),(0,r.kt)("h3",{id:"writing-unit-tests"},"Writing unit tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    #[test]\n    fn test_addition() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n")),(0,r.kt)("h3",{id:"lifetime-annotations"},"Lifetime annotations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn longest<'a>(s1: &'a str, s2: &'a str) -> &'a str {\n    if s1.len() > s2.len() {\n        s1\n    } else {\n        s2\n    }\n}\n")),(0,r.kt)("h3",{id:"advanced-pattern-matching"},"Advanced Pattern Matching"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'match result {\n    Ok(value) => println!("Value is {}", value),\n    Err(error) => eprintln!("Error: {}", error),\n}\n')),(0,r.kt)("h3",{id:"option-and-result-unwrapper"},"Option and result unwrapper"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let result = calculate_result();\nlet value = result.unwrap_or_else(|error| {\n    eprintln!("Error: {}", error);\n    default_value()\n});\n')),(0,r.kt)("h3",{id:"concurrency-with-async-std"},"Concurrency with async-std"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use async_std::task;\n\nasync fn async_function() {\n    // Async code here\n}\n\nfn main() {\n    task::block_on(async_function());\n}\n")),(0,r.kt)("h3",{id:"channels-for-concurrency"},"Channels for concurrency"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::mpsc;\nuse std::thread;\n\nlet (sender, receiver) = mpsc::channel();\n\nthread::spawn(move || {\n    sender.send("Message from another thread").unwrap();\n});\n\nlet received = receiver.recv().unwrap();\n')))}p.isMDXComponent=!0}}]);