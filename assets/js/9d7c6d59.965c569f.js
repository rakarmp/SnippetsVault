"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3417],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),m=l,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?a.createElement(k,r(r({ref:n},c),{},{components:t})):a.createElement(k,r({ref:n},c))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:l,r[1]=o;for(var u=2;u<i;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1046:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(7462),l=(t(7294),t(3905));const i={},r="Kotlin",o={unversionedId:"kotlin_snippets",id:"kotlin_snippets",title:"Kotlin",description:"Hello World",source:"@site/docs/kotlin_snippets.md",sourceDirName:".",slug:"/kotlin_snippets",permalink:"/SnippetsVault/docs/kotlin_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/kotlin_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript",permalink:"/SnippetsVault/docs/javascript_snippets"},next:{title:"Perl",permalink:"/SnippetsVault/docs/perl_snippets"}},s={},u=[{value:"Hello World",id:"hello-world",level:3},{value:"Variable declaration",id:"variable-declaration",level:3},{value:"Basic data types",id:"basic-data-types",level:3},{value:"String interpolation",id:"string-interpolation",level:3},{value:"Conditional statements",id:"conditional-statements",level:3},{value:"When expression",id:"when-expression",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Function declaration",id:"function-declaration",level:3},{value:"Lambda Functions",id:"lambda-functions",level:3},{value:"Extension Functions",id:"extension-functions",level:3},{value:"Lists",id:"lists",level:3},{value:"Maps",id:"maps",level:3},{value:"Null safety",id:"null-safety",level:3},{value:"Class declaration",id:"class-declaration",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Enum",id:"enum",level:3},{value:"Try-catch",id:"try-catch",level:3},{value:"File IO",id:"file-io",level:3},{value:"Extension Properties",id:"extension-properties",level:3},{value:"Filter List",id:"filter-list",level:3},{value:"Map List",id:"map-list",level:3},{value:"Sort List",id:"sort-list",level:3},{value:"String operations",id:"string-operations",level:3},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Date and Time",id:"date-and-time",level:3},{value:"Random Numbers",id:"random-numbers",level:3},{value:"Multiline Strings",id:"multiline-strings",level:3},{value:"Break and Continue",id:"break-and-continue",level:3},{value:"Collections Operations (e.g., sum)",id:"collections-operations-eg-sum",level:3},{value:"Read from console",id:"read-from-console",level:3},{value:"Type casting",id:"type-casting",level:3},{value:"Elvis operator",id:"elvis-operator",level:3},{value:"Extension Properties",id:"extension-properties-1",level:3},{value:"Get current thread name",id:"get-current-thread-name",level:3},{value:"Exception handling with resources",id:"exception-handling-with-resources",level:3},{value:"Function references",id:"function-references",level:3},{value:"range check",id:"range-check",level:3},{value:"Coroutines",id:"coroutines",level:3},{value:"Extension function for JSON parsing",id:"extension-function-for-json-parsing",level:3},{value:"Function wtih a generic type constraint",id:"function-wtih-a-generic-type-constraint",level:3},{value:"Singleton object",id:"singleton-object",level:3},{value:"Custom exception",id:"custom-exception",level:3},{value:"Seaaled classes and when expression",id:"seaaled-classes-and-when-expression",level:3},{value:"Function with varang parameters",id:"function-with-varang-parameters",level:3},{value:"Inline function",id:"inline-function",level:3},{value:"Delegated properties",id:"delegated-properties",level:3},{value:"Lazy initialization",id:"lazy-initialization",level:3},{value:"Coroutines with deferred result",id:"coroutines-with-deferred-result",level:3},{value:"Extension function on collections",id:"extension-function-on-collections",level:3},{value:"Using sequence for lazy evaluation",id:"using-sequence-for-lazy-evaluation",level:3},{value:"Reflection",id:"reflection",level:3},{value:"Higher-Order Functions",id:"higher-order-functions",level:3},{value:"Companion object",id:"companion-object",level:3},{value:"Function with reified type parameter",id:"function-with-reified-type-parameter",level:3},{value:"Custom operator overload",id:"custom-operator-overload",level:3},{value:"Immutable collections",id:"immutable-collections",level:3},{value:"Data classes",id:"data-classes",level:3},{value:"Inline classes",id:"inline-classes",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"kotlin"},"Kotlin"),(0,l.kt)("h3",{id:"hello-world"},"Hello World"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() {\n    println("Hello, World!")\n}\n')),(0,l.kt)("h3",{id:"variable-declaration"},"Variable declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val pi = 3.14159\nvar count = 0\n")),(0,l.kt)("h3",{id:"basic-data-types"},"Basic data types"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val num: Int = 42\nval name: String = "John"\nval isTrue: Boolean = true\n')),(0,l.kt)("h3",{id:"string-interpolation"},"String interpolation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val name = "John"\nval age = 42\nprintln("My name is $name and I am $age years old.")\n')),(0,l.kt)("h3",{id:"conditional-statements"},"Conditional statements"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val age = 18\nif (age >= 18) {\n    println("You\'re an adult.")\n} else {\n    println("You\'re a minor.")\n}\n')),(0,l.kt)("h3",{id:"when-expression"},"When expression"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val day = 2\nwhen (day) {\n    1 -> println("Monday")\n    2 -> println("Tuesday")\n    else -> println("Other day")\n}\n')),(0,l.kt)("h3",{id:"for-loop"},"For loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..5) {\n    println(i)\n}\n")),(0,l.kt)("h3",{id:"while-loop"},"While loop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"var i = 0\nwhile (i < 5) {\n    println(i)\n    i++\n}\n")),(0,l.kt)("h3",{id:"function-declaration"},"Function declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun add(a: Int, b: Int): Int {\n    return a + b\n}\n")),(0,l.kt)("h3",{id:"lambda-functions"},"Lambda Functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val multiply = { a: Int, b: Int -> a * b }\nval result = multiply(5, 3)\n")),(0,l.kt)("h3",{id:"extension-functions"},"Extension Functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun String.isPalindrome(): Boolean {\n    val cleanStr = this.replace("\\\\s".toRegex(), "").toLowerCase()\n    return cleanStr == cleanStr.reversed()\n}\n')),(0,l.kt)("h3",{id:"lists"},"Lists"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val fruits = listOf("apple", "banana", "cherry")\nval firstFruit = fruits[0]\n')),(0,l.kt)("h3",{id:"maps"},"Maps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val scores = mapOf("Alice" to 95, "Bob" to 85, "Carol" to 90)\nval aliceScore = scores["Alice"]\n')),(0,l.kt)("h3",{id:"null-safety"},"Null safety"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val nullableValue: String? = null\nval length = nullableValue?.length ?: 0\n")),(0,l.kt)("h3",{id:"class-declaration"},"Class declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person(val name: String, var age: Int)\nval person = Person("John", 30)\n')),(0,l.kt)("h3",{id:"inheritance"},"Inheritance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"open class Animal(val name: String)\nclass Dog(name: String, val breed: String) : Animal(name)\n")),(0,l.kt)("h3",{id:"interfaces"},"Interfaces"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface Shape {\n    fun area(): Double\n}\n")),(0,l.kt)("h3",{id:"enum"},"Enum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED, GREEN, BLUE\n}\nval selectedColor = Color.RED\n")),(0,l.kt)("h3",{id:"try-catch"},"Try-catch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"try {\n    // Code that may throw an exception\n} catch (e: Exception) {\n    // Handle the exception\n}\n")),(0,l.kt)("h3",{id:"file-io"},"File IO"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val text = File("data.txt").readText()\nFile("output.txt").writeText("Hello, World!")\n')),(0,l.kt)("h3",{id:"extension-properties"},"Extension Properties"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val List<String>.secondOrNull: String?\n    get() = if (size >= 2) this[1] else null\n")),(0,l.kt)("h3",{id:"filter-list"},"Filter List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val numbers = listOf(1, 2, 3, 4, 5)\nval evenNumbers = numbers.filter { it % 2 == 0 }\n")),(0,l.kt)("h3",{id:"map-list"},"Map List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val numbers = listOf(1, 2, 3, 4, 5)\nval squaredNumbers = numbers.map { it * it }\n")),(0,l.kt)("h3",{id:"sort-list"},"Sort List"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val names = listOf("Alice", "Bob", "Carol")\nval sortedNames = names.sorted()\n')),(0,l.kt)("h3",{id:"string-operations"},"String operations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val text = "Kotlin is awesome"\nval upperCaseText = text.toUpperCase()\nval words = text.split(" ")\n')),(0,l.kt)("h3",{id:"regular-expressions"},"Regular Expressions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val regex = "\\\\d+".toRegex()\nval match = regex.find("Age: 30")?.value\n')),(0,l.kt)("h3",{id:"date-and-time"},"Date and Time"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"import java.time.LocalDate\nval currentDate = LocalDate.now()\n")),(0,l.kt)("h3",{id:"random-numbers"},"Random Numbers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val random = (0..10).random()\n")),(0,l.kt)("h3",{id:"multiline-strings"},"Multiline Strings"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val multilineText = """\n    This is a\n    multiline string.\n"""\n')),(0,l.kt)("h3",{id:"break-and-continue"},"Break and Continue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..10) {\n    if (i == 5) break\n    println(i)\n}\n")),(0,l.kt)("h3",{id:"collections-operations-eg-sum"},"Collections Operations (e.g., sum)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val numbers = listOf(1, 2, 3, 4, 5)\nval sum = numbers.sum()\n")),(0,l.kt)("h3",{id:"read-from-console"},"Read from console"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val input = readLine()\n")),(0,l.kt)("h3",{id:"type-casting"},"Type casting"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val anyValue: Any = 42\nval intValue = anyValue as? Int\n")),(0,l.kt)("h3",{id:"elvis-operator"},"Elvis operator"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val result: Int? = null\nval finalResult = result ?: 0\n")),(0,l.kt)("h3",{id:"extension-properties-1"},"Extension Properties"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val List<String>.secondOrNull: String?\n    get() = if (size >= 2) this[1] else null\n")),(0,l.kt)("h3",{id:"get-current-thread-name"},"Get current thread name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val threadName = Thread.currentThread().name\n")),(0,l.kt)("h3",{id:"exception-handling-with-resources"},"Exception handling with resources"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val file = File("example.txt")\nfile.bufferedReader().use { reader ->\n    val content = reader.readText()\n    // Process content\n}\n')),(0,l.kt)("h3",{id:"function-references"},"Function references"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun isEven(n: Int) = n % 2 == 0\nval checkEven: (Int) -> Boolean = ::isEven\n")),(0,l.kt)("h3",{id:"range-check"},"range check"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val number = 5\nif (number in 1..10) {\n    println("Number is in the range 1 to 10.")\n}\n')),(0,l.kt)("h3",{id:"coroutines"},"Coroutines"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.*\nfun main() {\n    runBlocking {\n        launch {\n            delay(1000)\n            println("Hello from coroutine!")\n        }\n    }\n}\n')),(0,l.kt)("h3",{id:"extension-function-for-json-parsing"},"Extension function for JSON parsing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\n\ninline fun <reified T> String.fromJson(): T =\n    jacksonObjectMapper().readValue(this, T::class.java)\n\nval json = "{\\"name\\":\\"Alice\\", \\"age\\":30}"\nval person = json.fromJson<Person>()\n')),(0,l.kt)("h3",{id:"function-wtih-a-generic-type-constraint"},"Function wtih a generic type constraint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun <T : Number> add(a: T, b: T): T {\n    return when (a) {\n        is Double -> a + b as T\n        is Float -> a + b as T\n        is Long -> a + b as T\n        else -> a.toInt() + b.toInt() as T\n    }\n}\n\nval result = add(1.5, 2.5)\n")),(0,l.kt)("h3",{id:"singleton-object"},"Singleton object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'object Configuration {\n    val apiKey = "your_api_key"\n}\n\nval apiKey = Configuration.apiKey\n')),(0,l.kt)("h3",{id:"custom-exception"},"Custom exception"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'class CustomException(message: String) : Exception(message)\n\nfun someFunction() {\n    throw CustomException("This is a custom exception.")\n}\n')),(0,l.kt)("h3",{id:"seaaled-classes-and-when-expression"},"Seaaled classes and when expression"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'sealed class Result\ndata class Success(val data: String) : Result()\ndata class Error(val message: String) : Result()\n\nfun processResult(result: Result) {\n    when (result) {\n        is Success -> println("Success: ${result.data}")\n        is Error -> println("Error: ${result.message}")\n    }\n}\n')),(0,l.kt)("h3",{id:"function-with-varang-parameters"},"Function with varang parameters"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun sum(vararg numbers: Int): Int {\n    return numbers.sum()\n}\n\nval total = sum(1, 2, 3, 4, 5)\n")),(0,l.kt)("h3",{id:"inline-function"},"Inline function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline fun measureTimeMillis(block: () -> Unit): Long {\n    val startTime = System.currentTimeMillis()\n    block()\n    return System.currentTimeMillis() - startTime\n}\n\nval executionTime = measureTimeMillis {\n    // Code to measure execution time\n}\n")),(0,l.kt)("h3",{id:"delegated-properties"},"Delegated properties"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'class User {\n    var name: String by Delegates.observable("John") { _, old, new ->\n        println("Name changed from $old to $new")\n    }\n}\n\nval user = User()\nuser.name = "Alice"\n')),(0,l.kt)("h3",{id:"lazy-initialization"},"Lazy initialization"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val expensiveData: String by lazy {\n    // Initialize expensive data\n    "This data took some time to initialize"\n}\n\n// Access expensiveData when needed\nval result = expensiveData.length\n')),(0,l.kt)("h3",{id:"coroutines-with-deferred-result"},"Coroutines with deferred result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.*\nfun asyncTask(): Deferred<String> = GlobalScope.async {\n    delay(1000)\n    return@async "Task completed"\n}\n\nval result = runBlocking {\n    val deferred = asyncTask()\n    deferred.await()\n}\n')),(0,l.kt)("h3",{id:"extension-function-on-collections"},"Extension function on collections"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun <T> List<T>.customFilter(predicate: (T) -> Boolean): List<T> {\n    val filteredList = mutableListOf<T>()\n    for (item in this) {\n        if (predicate(item)) {\n            filteredList.add(item)\n        }\n    }\n    return filteredList\n}\n\nval numbers = listOf(1, 2, 3, 4, 5)\nval evenNumbers = numbers.customFilter { it % 2 == 0 }\n")),(0,l.kt)("h3",{id:"using-sequence-for-lazy-evaluation"},"Using sequence for lazy evaluation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val numbers = sequence {\n    yield(1)\n    yield(2)\n    yield(3)\n}\n\nval sum = numbers.sum()\n")),(0,l.kt)("h3",{id:"reflection"},"Reflection"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person(val name: String, val age: Int)\n\nval person = Person("Alice", 30)\nval clazz = person::class\nval properties = clazz.memberProperties\n')),(0,l.kt)("h3",{id:"higher-order-functions"},"Higher-Order Functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun doOperation(value: Int, operation: (Int) -> Int): Int {\n    return operation(value)\n}\n\nval result = doOperation(5) { it * 2 }\n")),(0,l.kt)("h3",{id:"companion-object"},"Companion object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyClass {\n    companion object {\n        fun staticFunction() {\n            println("This is a static function")\n        }\n    }\n}\n\nMyClass.staticFunction()\n')),(0,l.kt)("h3",{id:"function-with-reified-type-parameter"},"Function with reified type parameter"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'inline fun <reified T> printType() {\n    println(T::class.simpleName)\n}\n\nprintType<String>() // Prints "String"\n')),(0,l.kt)("h3",{id:"custom-operator-overload"},"Custom operator overload"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Vector(val x: Int, val y: Int)\n\noperator fun Vector.plus(other: Vector): Vector {\n    return Vector(this.x + other.x, this.y + other.y)\n}\n\nval result = Vector(1, 2) + Vector(3, 4)\n")),(0,l.kt)("h3",{id:"immutable-collections"},"Immutable collections"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val immutableList = listOf("apple", "banana", "cherry")\nval modifiedList = immutableList.toMutableList()\nmodifiedList.add("date")\n')),(0,l.kt)("h3",{id:"data-classes"},"Data classes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Point(val x: Int, val y: Int)\n\nval point1 = Point(1, 2)\nval point2 = Point(1, 2)\nval areEqual = (point1 == point2) // true\n")),(0,l.kt)("h3",{id:"inline-classes"},"Inline classes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"inline class Meter(val value: Double)\n\nval length = Meter(5.0)\nval doubleValue: Double = length.value\n")))}d.isMDXComponent=!0}}]);