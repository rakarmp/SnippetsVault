"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return t?a.createElement(g,l(l({ref:n},d),{},{components:t})):a.createElement(g,l({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8231:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={},l="Python",o={unversionedId:"python_snippets",id:"python_snippets",title:"Python",description:"Hello World",source:"@site/docs/python_snippets.md",sourceDirName:".",slug:"/python_snippets",permalink:"/docs/python_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PHP",permalink:"/docs/php_snippets"},next:{title:"Ruby",permalink:"/docs/ruby_snippets"}},s={},p=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables",id:"variables",level:3},{value:"User Input",id:"user-input",level:3},{value:"String Concatenation",id:"string-concatenation",level:3},{value:"List Creation",id:"list-creation",level:3},{value:"List Slicing",id:"list-slicing",level:3},{value:"List comprehension",id:"list-comprehension",level:3},{value:"Conditional Statements",id:"conditional-statements",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Functions",id:"functions",level:3},{value:"File reading",id:"file-reading",level:3},{value:"File writing",id:"file-writing",level:3},{value:"Exception handling",id:"exception-handling",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Dictionary access",id:"dictionary-access",level:3},{value:"Dictionary iteration",id:"dictionary-iteration",level:3},{value:"Sets",id:"sets",level:3},{value:"Set operations",id:"set-operations",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Lambda functions",id:"lambda-functions",level:3},{value:"List Sorting",id:"list-sorting",level:3},{value:"String Manipulation",id:"string-manipulation",level:3},{value:"List reversal",id:"list-reversal",level:3},{value:"Finding Maximum",id:"finding-maximum",level:3},{value:"Finding Minimum",id:"finding-minimum",level:3},{value:"List Length",id:"list-length",level:3},{value:"List removal",id:"list-removal",level:3},{value:"List Appending",id:"list-appending",level:3},{value:"List copying",id:"list-copying",level:3},{value:"List clearing",id:"list-clearing",level:3},{value:"String Splitting",id:"string-splitting",level:3},{value:"String Joining",id:"string-joining",level:3},{value:"String Formatting",id:"string-formatting",level:3},{value:"Math Operations",id:"math-operations",level:3},{value:"Random number generation",id:"random-number-generation",level:3},{value:"Date and Time",id:"date-and-time",level:3},{value:"List unique values",id:"list-unique-values",level:3},{value:"Checking if a file exists",id:"checking-if-a-file-exists",level:3},{value:"Removing duplicates from a list",id:"removing-duplicates-from-a-list",level:3},{value:"List flattening",id:"list-flattening",level:3},{value:"List filtering",id:"list-filtering",level:3},{value:"List mapping",id:"list-mapping",level:3},{value:"List comprehension with condition",id:"list-comprehension-with-condition",level:3},{value:"Using generators",id:"using-generators",level:3},{value:"Handling JSON data",id:"handling-json-data",level:3},{value:"Reading JSON data",id:"reading-json-data",level:3},{value:"Reading and writting CSV files",id:"reading-and-writting-csv-files",level:3},{value:"Object-Oriented Programming (OOP)",id:"object-oriented-programming-oop",level:3},{value:"Decorators",id:"decorators",level:3},{value:"Threading",id:"threading",level:3},{value:"Exception Handling with Custom Exceptions:",id:"exception-handling-with-custom-exceptions",level:3},{value:"Working with Context Managers:",id:"working-with-context-managers",level:3},{value:"Multithreading with the concurrent.futures module:",id:"multithreading-with-the-concurrentfutures-module",level:3},{value:"Working with Regular Expressions:",id:"working-with-regular-expressions",level:3},{value:"Sending Email with the smtplib module:",id:"sending-email-with-the-smtplib-module",level:3},{value:"Working with REST APIs using the requests library",id:"working-with-rest-apis-using-the-requests-library",level:3},{value:"Database Connection with sqlite3",id:"database-connection-with-sqlite3",level:3},{value:"Object Serialization with the pickle module",id:"object-serialization-with-the-pickle-module",level:3},{value:"Asynchronous Programming with asyncio",id:"asynchronous-programming-with-asyncio",level:3},{value:"Working with Contextlib and the @contextmanager decorator",id:"working-with-contextlib-and-the-contextmanager-decorator",level:3},{value:"Working with bytes and Hexadecimal",id:"working-with-bytes-and-hexadecimal",level:3},{value:"Using collections module",id:"using-collections-module",level:3},{value:"Sending POST Request with the requests library",id:"sending-post-request-with-the-requests-library",level:3}],d={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"python"},"Python"),(0,i.kt)("h3",{id:"hello-world"},"Hello World"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'print("Hello, World!")\n')),(0,i.kt)("h3",{id:"variables"},"Variables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'name = "John"\nage = 30\n')),(0,i.kt)("h3",{id:"user-input"},"User Input"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'user_input = input("Enter something: ")\n')),(0,i.kt)("h3",{id:"string-concatenation"},"String Concatenation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'first_name = "John"\nlast_name = "Doe"\nfull_name = first_name + " " + last_name\n')),(0,i.kt)("h3",{id:"list-creation"},"List Creation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list = [1, 2, 3, 4, 5]\n")),(0,i.kt)("h3",{id:"list-slicing"},"List Slicing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"subset = my_list[1:3]\n")),(0,i.kt)("h3",{id:"list-comprehension"},"List comprehension"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"squared_numbers = [x**2 for x in my_list]\n")),(0,i.kt)("h3",{id:"conditional-statements"},"Conditional Statements"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'if age > 18:\n    print("You are an adult.")\nelif age == 18:\n    print("You are 18.")\nelse:\n    print("You are under 18.")\n')),(0,i.kt)("h3",{id:"for-loop"},"For loop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"for i in range(10):\n    print(i)\n")),(0,i.kt)("h3",{id:"while-loop"},"While loop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"count = 0\nwhile count < 10:\n    print(count)\n    count += 1\n")),(0,i.kt)("h3",{id:"functions"},"Functions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def greet(name):\n    return "Hello, " + name + "!"\n')),(0,i.kt)("h3",{id:"file-reading"},"File reading"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'with open("file.txt", "r") as file:\n    content = file.read()\n')),(0,i.kt)("h3",{id:"file-writing"},"File writing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'with open("output.txt", "w") as file:\n    file.write("Hello, World!")\n')),(0,i.kt)("h3",{id:"exception-handling"},"Exception handling"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print("Cannot divide by zero.")\n')),(0,i.kt)("h3",{id:"dictionaries"},"Dictionaries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'my_dict = {\n    "name": "John",\n    "age": 30\n}\n')),(0,i.kt)("h3",{id:"dictionary-access"},"Dictionary access"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'name = my_dict["name"]\n')),(0,i.kt)("h3",{id:"dictionary-iteration"},"Dictionary iteration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"for key, value in my_dict.items():\n    print(key, value)\n")),(0,i.kt)("h3",{id:"sets"},"Sets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_set = {1, 2, 3, 4, 5}\n")),(0,i.kt)("h3",{id:"set-operations"},"Set operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"intersection = my_set.intersection({4, 5, 6})\n")),(0,i.kt)("h3",{id:"tuples"},"Tuples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"coordinates = (10, 20)\n")),(0,i.kt)("h3",{id:"lambda-functions"},"Lambda functions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"square = lambda x: x**2\n")),(0,i.kt)("h3",{id:"list-sorting"},"List Sorting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list.sort()\n")),(0,i.kt)("h3",{id:"string-manipulation"},"String Manipulation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'my_string = "Hello, World!"\nupper_text = my_string.upper()\n')),(0,i.kt)("h3",{id:"list-reversal"},"List reversal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"reversed_list = my_list[::-1]\n")),(0,i.kt)("h3",{id:"finding-maximum"},"Finding Maximum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"max_value = max(my_list)\n")),(0,i.kt)("h3",{id:"finding-minimum"},"Finding Minimum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"min_value = min(my_list)\n")),(0,i.kt)("h3",{id:"list-length"},"List Length"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"length = len(my_list)\n")),(0,i.kt)("h3",{id:"list-removal"},"List removal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list.remove(3)\n")),(0,i.kt)("h3",{id:"list-appending"},"List Appending"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list.append(6)\n")),(0,i.kt)("h3",{id:"list-copying"},"List copying"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list_copy = my_list.copy()\n")),(0,i.kt)("h3",{id:"list-clearing"},"List clearing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"my_list.clear()\n")),(0,i.kt)("h3",{id:"string-splitting"},"String Splitting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'words = my_string.split(", ")\n')),(0,i.kt)("h3",{id:"string-joining"},"String Joining"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'my_string = ", ".join(words)\n')),(0,i.kt)("h3",{id:"string-formatting"},"String Formatting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'name = "John"\nage = 30\nmy_string = f"Hello, my name is {name} and I am {age} years old."\n')),(0,i.kt)("h3",{id:"math-operations"},"Math Operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"result = abs(-5)\n")),(0,i.kt)("h3",{id:"random-number-generation"},"Random number generation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import random\nrandom_number = random.randint(1, 10)\n")),(0,i.kt)("h3",{id:"date-and-time"},"Date and Time"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import datetime\ncurrent_time = datetime.now()\n")),(0,i.kt)("h3",{id:"list-unique-values"},"List unique values"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"unique_values = list(set(my_list))\n")),(0,i.kt)("h3",{id:"checking-if-a-file-exists"},"Checking if a file exists"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import os\nif os.path.exists("file.txt"):\n    print("File exists.")\n')),(0,i.kt)("h3",{id:"removing-duplicates-from-a-list"},"Removing duplicates from a list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"unique_values = list(dict.fromkeys(my_list))\n")),(0,i.kt)("h3",{id:"list-flattening"},"List flattening"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"flat_list = [item for sublist in my_list for item in sublist]\n")),(0,i.kt)("h3",{id:"list-filtering"},"List filtering"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"filtered_list = list(filter(lambda x: x > 5, my_list))\n")),(0,i.kt)("h3",{id:"list-mapping"},"List mapping"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"mapped_list = list(map(lambda x: x**2, my_list))\n")),(0,i.kt)("h3",{id:"list-comprehension-with-condition"},"List comprehension with condition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"even_numbers = [x for x in range(10) if x % 2 == 0]\n")),(0,i.kt)("h3",{id:"using-generators"},"Using generators"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def squares(n):\n    for i in range(n):\n        yield i**2\n")),(0,i.kt)("h3",{id:"handling-json-data"},"Handling JSON data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import json\ndata = {"name": "John", "age": 30}\njson_data = json.dumps(data)\n')),(0,i.kt)("h3",{id:"reading-json-data"},"Reading JSON data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import json\nwith open("data.json", "r") as file:\n    data = json.load(file)\n')),(0,i.kt)("h3",{id:"reading-and-writting-csv-files"},"Reading and writting CSV files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import csv\n\n# Reading CSV\nwith open("data.csv", "r") as csvfile:\n    reader = csv.DictReader(csvfile)\n    for row in reader:\n        print(row["name"], row["age"])\n\n# Writing CSV\ndata = [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 32}]\nwith open("output.csv", "w", newline="") as csvfile:\n    fieldnames = ["name", "age"]\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n    writer.writeheader()\n    for row in data:\n        writer.writerow(row)\n')),(0,i.kt)("h3",{id:"object-oriented-programming-oop"},"Object-Oriented Programming (OOP)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f"Hello, my name is {self.name}."\n\nperson = Person("Alice", 28)\nprint(person.greet())\n')),(0,i.kt)("h3",{id:"decorators"},"Decorators"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def log_function_call(func):\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        print(f"Calling {func.__name__} with arguments {args} returned {result}.")\n        return result\n    return wrapper\n\n@log_function_call\ndef add(a, b):\n    return a + b\n')),(0,i.kt)("h3",{id:"threading"},"Threading"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import threading\n\ndef print_numbers():\n    for i in range(1, 6):\n        print(f"Number {i}")\n\ndef print_letters():\n    for letter in "abcde":\n        print(f"Letter {letter}")\n\nthread1 = threading.Thread(target=print_numbers)\nthread2 = threading.Thread(target=print_letters)\n')),(0,i.kt)("h3",{id:"exception-handling-with-custom-exceptions"},"Exception Handling with Custom Exceptions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class CustomError(Exception):\n    def __init__(self, message):\n        super().__init__(message)\n\ntry:\n    raise CustomError("This is a custom exception.")\nexcept CustomError as e:\n    print(e)\n')),(0,i.kt)("h3",{id:"working-with-context-managers"},"Working with Context Managers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyContext:\n    def __enter__(self):\n        print("Entering the context")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print("Exiting the context")\n\nwith MyContext() as context:\n    print("Inside the context")\n')),(0,i.kt)("h3",{id:"multithreading-with-the-concurrentfutures-module"},"Multithreading with the concurrent.futures module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import concurrent.futures\n\ndef square(x):\n    return x**2\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = executor.map(square, [1, 2, 3, 4, 5])\n")),(0,i.kt)("h3",{id:"working-with-regular-expressions"},"Working with Regular Expressions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import re\n\npattern = r'\\b\\d{3}-\\d{2}-\\d{4}\\b'\ntext = \"My SSN is 123-45-6789.\"\nmatch = re.search(pattern, text)\n")),(0,i.kt)("h3",{id:"sending-email-with-the-smtplib-module"},"Sending Email with the smtplib module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import smtplib\nfrom email.mime.text import MIMEText\n\nserver = smtplib.SMTP("smtp.example.com")\nmsg = MIMEText("This is a test email.")\nmsg["Subject"] = "Test Email"\nmsg["From"] = "sender@example.com"\nmsg["To"] = "recipient@example.com"\nserver.sendmail("sender@example.com", "recipient@example.com", msg.as_string())\nserver.quit()\n')),(0,i.kt)("h3",{id:"working-with-rest-apis-using-the-requests-library"},"Working with REST APIs using the requests library"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import requests\n\nresponse = requests.get("https://jsonplaceholder.typicode.com/posts/1")\ndata = response.json()\n')),(0,i.kt)("h3",{id:"database-connection-with-sqlite3"},"Database Connection with sqlite3"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import sqlite3\n\nconn = sqlite3.connect("mydatabase.db")\ncursor = conn.cursor()\ncursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)")\n')),(0,i.kt)("h3",{id:"object-serialization-with-the-pickle-module"},"Object Serialization with the pickle module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import pickle\n\ndata = {"name": "Alice", "age": 30}\nwith open("data.pickle", "wb") as file:\n    pickle.dump(data, file)\n')),(0,i.kt)("h3",{id:"asynchronous-programming-with-asyncio"},"Asynchronous Programming with asyncio"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\n\nasync def hello_world():\n    await asyncio.sleep(1)\n    print("Hello, World!")\n\nasyncio.run(hello_world())\n')),(0,i.kt)("h3",{id:"working-with-contextlib-and-the-contextmanager-decorator"},"Working with Contextlib and the @contextmanager decorator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from contextlib import contextmanager\n\n@contextmanager\ndef my_context():\n    print("Entering the context")\n    yield\n    print("Exiting the context")\n\nwith my_context():\n    print("Inside the context")\n\n')),(0,i.kt)("h3",{id:"working-with-bytes-and-hexadecimal"},"Working with bytes and Hexadecimal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"data = b'Hello, World!'\nhex_data = data.hex()\n")),(0,i.kt)("h3",{id:"using-collections-module"},"Using collections module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from collections import Counter\n\nword_count = Counter(["apple", "banana", "apple", "cherry"])\n')),(0,i.kt)("h3",{id:"sending-post-request-with-the-requests-library"},"Sending POST Request with the requests library"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import requests\n\ndata = {"name": "Alice", "age": 25}\nresponse = requests.post("https://example.com/api", json=data)\n')))}c.isMDXComponent=!0}}]);