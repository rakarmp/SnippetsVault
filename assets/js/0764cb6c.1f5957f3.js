"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6486],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>g});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),u=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(a),p=r,g=m["".concat(o,".").concat(p)]||m[p]||c[p]||i;return a?t.createElement(g,l(l({ref:n},d),{},{components:a})):t.createElement(g,l({ref:n},d))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[m]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=a[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2560:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var t=a(7462),r=(a(7294),a(3905));const i={},l="Ruby",s={unversionedId:"ruby_snippets",id:"ruby_snippets",title:"Ruby",description:"Hello World",source:"@site/docs/ruby_snippets.md",sourceDirName:".",slug:"/ruby_snippets",permalink:"/docs/ruby_snippets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby_snippets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/docs/python_snippets"},next:{title:"Rust",permalink:"/docs/rust_snippets"}},o={},u=[{value:"Hello World",id:"hello-world",level:3},{value:"Variables",id:"variables",level:3},{value:"User input",id:"user-input",level:3},{value:"If-else",id:"if-else",level:3},{value:"For loop",id:"for-loop",level:3},{value:"While loop",id:"while-loop",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Array access",id:"array-access",level:3},{value:"Functions",id:"functions",level:3},{value:"Object oriented programming",id:"object-oriented-programming",level:3},{value:"Contructors and Object Initialization",id:"contructors-and-object-initialization",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"List (Arrays)",id:"list-arrays",level:3},{value:"List operations (Add, Remove)",id:"list-operations-add-remove",level:3},{value:"List iteration",id:"list-iteration",level:3},{value:"Hashes (dictionaries)",id:"hashes-dictionaries",level:3},{value:"Hash access and iteration",id:"hash-access-and-iteration",level:3},{value:"String Manipulation",id:"string-manipulation",level:3},{value:"String concatenation",id:"string-concatenation",level:3},{value:"DateTime",id:"datetime",level:3},{value:"Exception Handling (begin-rescue)",id:"exception-handling-begin-rescue",level:3},{value:"File reading",id:"file-reading",level:3},{value:"Working with Enums",id:"working-with-enums",level:3},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Working with sets",id:"working-with-sets",level:3},{value:"Set operations (intersection)",id:"set-operations-intersection",level:3},{value:"command-line arguments",id:"command-line-arguments",level:3},{value:"Random number generation",id:"random-number-generation",level:3},{value:"Working with symbols",id:"working-with-symbols",level:3},{value:"Enumerable methods (maps)",id:"enumerable-methods-maps",level:3},{value:"Enumerable methods (select)",id:"enumerable-methods-select",level:3},{value:"Enumerable methods (reduce)",id:"enumerable-methods-reduce",level:3},{value:"Blocks and Yield",id:"blocks-and-yield",level:3},{value:"Procs and Lambdas",id:"procs-and-lambdas",level:3},{value:"Modules and Mixins",id:"modules-and-mixins",level:3},{value:"Custom exceptions",id:"custom-exceptions",level:3},{value:"JSON serialization and deserialization",id:"json-serialization-and-deserialization",level:3},{value:"Working with Timezones",id:"working-with-timezones",level:3},{value:"Working with Threads",id:"working-with-threads",level:3},{value:"Functional Programming (Map, Reduce, Filter)",id:"functional-programming-map-reduce-filter",level:3},{value:"Modules and Namespace Resolution",id:"modules-and-namespace-resolution",level:3},{value:"Method missing and dynamic methods",id:"method-missing-and-dynamic-methods",level:3},{value:"Singleton classes and methods",id:"singleton-classes-and-methods",level:3},{value:"Metaprogramming with define_method",id:"metaprogramming-with-define_method",level:3},{value:"Custom enumerators",id:"custom-enumerators",level:3},{value:"Memoization with Hashes",id:"memoization-with-hashes",level:3},{value:"Closures with Lambdas",id:"closures-with-lambdas",level:3},{value:"Functional programming (currying)",id:"functional-programming-currying",level:3},{value:"Method chaining",id:"method-chaining",level:3},{value:"Custom exceptions and error handling",id:"custom-exceptions-and-error-handling",level:3},{value:"Asynchronous Programming with Fibers (Fiber, Fiber.yield)",id:"asynchronous-programming-with-fibers-fiber-fiberyield",level:3},{value:"Multithreading with Threads and Mutexes",id:"multithreading-with-threads-and-mutexes",level:3},{value:"Working with symbols",id:"working-with-symbols-1",level:3},{value:"File I/O with Blocks (File.open)",id:"file-io-with-blocks-fileopen",level:3},{value:"Enumerable methods (reduce with symbols)",id:"enumerable-methods-reduce-with-symbols",level:3},{value:"Custom Operators (Overloading)",id:"custom-operators-overloading",level:3},{value:"Working with Sets (Set.intersection)",id:"working-with-sets-setintersection",level:3},{value:"Working with Dates and Times (Time.zone)",id:"working-with-dates-and-times-timezone",level:3},{value:"Using tap for Method Chaining and Debugging",id:"using-tap-for-method-chaining-and-debugging",level:3}],d={toc:u},m="wrapper";function c(e){let{components:n,...a}=e;return(0,r.kt)(m,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ruby"},"Ruby"),(0,r.kt)("h3",{id:"hello-world"},"Hello World"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'puts "Hello World!"\n')),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'age = 30\nname = "John"\n')),(0,r.kt)("h3",{id:"user-input"},"User input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'print "Enter something: "\nuser_input = gets.chomp\n')),(0,r.kt)("h3",{id:"if-else"},"If-else"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'if age >= 18\n  puts "You are an adult."\nelse\n  puts "You are a minor."\nend\n')),(0,r.kt)("h3",{id:"for-loop"},"For loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"for i in 0..4\n  puts i\nend\n")),(0,r.kt)("h3",{id:"while-loop"},"While loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"count = 0\nwhile count < 5\n  puts count\n  count += 1\nend\n")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\n")),(0,r.kt)("h3",{id:"array-access"},"Array access"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"first_number = numbers[0]\n")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def add(a, b)\n  a + b\nend\n")),(0,r.kt)("h3",{id:"object-oriented-programming"},"Object oriented programming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class Person\n  attr_accessor :name, :age\n  def greet\n    puts "Hello, my name is #{@name}."\n  end\nend\n')),(0,r.kt)("h3",{id:"contructors-and-object-initialization"},"Contructors and Object Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Person\n  attr_accessor :name, :age\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\nend\n")),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Student < Person\n  attr_accessor :school\nend\n")),(0,r.kt)("h3",{id:"list-arrays"},"List (Arrays)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'fruits = ["apple", "banana", "cherry", "date", "fig"]\n')),(0,r.kt)("h3",{id:"list-operations-add-remove"},"List operations (Add, Remove)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'fruits.push("grape")\nfruits.delete("cherry")\n')),(0,r.kt)("h3",{id:"list-iteration"},"List iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"fruits.each do |fruit|\n  puts fruit\nend\n")),(0,r.kt)("h3",{id:"hashes-dictionaries"},"Hashes (dictionaries)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'scores = {"Alice" => 95, "Bob" => 88, "Charlie" => 72}\n')),(0,r.kt)("h3",{id:"hash-access-and-iteration"},"Hash access and iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'scores.each do |name, score|\n  puts "#{name}: #{score}"\nend\n')),(0,r.kt)("h3",{id:"string-manipulation"},"String Manipulation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'text = "Hello, World!"\nsubstring = text[0..4]\n')),(0,r.kt)("h3",{id:"string-concatenation"},"String concatenation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'greeting = "Hello"\nname = "Alice"\nmessage = "#{greeting}, #{name}!"\n')),(0,r.kt)("h3",{id:"datetime"},"DateTime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"current_time = Time.now\n")),(0,r.kt)("h3",{id:"exception-handling-begin-rescue"},"Exception Handling (begin-rescue)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'begin\n  result = 10 / 0\nrescue => e\n  puts "Error: #{e.message}"\nend\n')),(0,r.kt)("h3",{id:"file-reading"},"File reading"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'file = File.open("example.txt", "r")\ncontent = file.read\nfile.close\n')),(0,r.kt)("p",null,"###File writing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'file = File.open("output.txt", "w")\nfile.puts "This is some text."\nfile.close\n')),(0,r.kt)("h3",{id:"working-with-enums"},"Working with Enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"module DaysOfWeek\n  MONDAY = 0\n  TUESDAY = 1\n  WEDNESDAY = 2\n  THURSDAY = 3\n  FRIDAY = 4\n  SATURDAY = 5\n  SUNDAY = 6\nend\n")),(0,r.kt)("h3",{id:"regular-expressions"},"Regular Expressions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'text = "My email is example@example.com."\nemail_regex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/\nis_email = email_regex.match?(text)\n')),(0,r.kt)("h3",{id:"working-with-sets"},"Working with sets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'set'\nunique_numbers = Set.new([1, 2, 3, 4, 5])\n")),(0,r.kt)("h3",{id:"set-operations-intersection"},"Set operations (intersection)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"set1 = Set.new([1, 2, 3])\nset2 = Set.new([2, 3, 4])\nintersection = set1 & set2\n")),(0,r.kt)("h3",{id:"command-line-arguments"},"command-line arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"if ARGV.length > 0\n  arg1 = ARGV[0]\n  # Process command-line arguments\nend\n")),(0,r.kt)("h3",{id:"random-number-generation"},"Random number generation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"random_number = rand(1..10)\n")),(0,r.kt)("h3",{id:"working-with-symbols"},"Working with symbols"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"status = :success\n")),(0,r.kt)("h3",{id:"enumerable-methods-maps"},"Enumerable methods (maps)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\nsquared_numbers = numbers.map { |n| n * n }\n")),(0,r.kt)("h3",{id:"enumerable-methods-select"},"Enumerable methods (select)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\neven_numbers = numbers.select { |n| n.even? }\n")),(0,r.kt)("h3",{id:"enumerable-methods-reduce"},"Enumerable methods (reduce)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\nsum = numbers.reduce(0) { |total, n| total + n }\n")),(0,r.kt)("h3",{id:"blocks-and-yield"},"Blocks and Yield"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def custom_each(arr)\n  for item in arr\n    yield(item)\n  end\nend\ncustom_each([1, 2, 3]) { |x| puts x }\n")),(0,r.kt)("h3",{id:"procs-and-lambdas"},"Procs and Lambdas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"add = Proc.new { |a, b| a + b }\nresult = add.call(3, 4)\n")),(0,r.kt)("h3",{id:"modules-and-mixins"},"Modules and Mixins"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'module Greetable\n  def greet\n    puts "Hello!"\n  end\nend\nclass Person\n  include Greetable\nend\n')),(0,r.kt)("h3",{id:"custom-exceptions"},"Custom exceptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class CustomException < StandardError\n  def initialize(message)\n    super(message)\n  end\nend\nbegin\n  raise CustomException.new("Custom exception occurred.")\nrescue CustomException => e\n  puts "Error: #{e.message}"\nend\n')),(0,r.kt)("h3",{id:"json-serialization-and-deserialization"},"JSON serialization and deserialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'require \'json\'\ndata = { "name" => "Alice", "age" => 30 }\njson_string = data.to_json\nparsed_data = JSON.parse(json_string)\n')),(0,r.kt)("h3",{id:"working-with-timezones"},"Working with Timezones"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'tzinfo'\ntz = TZInfo::Timezone.get('America/New_York')\ntime_in_ny = tz.utc_to_local(Time.now.utc)\n")),(0,r.kt)("h3",{id:"working-with-threads"},"Working with Threads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'t1 = Thread.new { puts "Thread 1" }\nt2 = Thread.new { puts "Thread 2" }\nt1.join\nt2.join\n')),(0,r.kt)("h3",{id:"functional-programming-map-reduce-filter"},"Functional Programming (Map, Reduce, Filter)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\nsquared_numbers = numbers.map { |n| n * n }\ntotal = numbers.reduce(0) { |sum, n| sum + n }\neven_numbers = numbers.select(&:even?)\n")),(0,r.kt)("h3",{id:"modules-and-namespace-resolution"},"Modules and Namespace Resolution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'module MyModule\n  def self.my_method\n    puts "MyModule.my_method"\n  end\nend\nMyModule.my_method\n')),(0,r.kt)("h3",{id:"method-missing-and-dynamic-methods"},"Method missing and dynamic methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class DynamicMethods\n  def method_missing(method_name, *args)\n    puts "Calling method: #{method_name}"\n  end\nend\nobj = DynamicMethods.new\nobj.some_dynamic_method\n')),(0,r.kt)("h3",{id:"singleton-classes-and-methods"},"Singleton classes and methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class MyClass\n  def self.my_class_method\n    puts "This is a class method."\n  end\nend\nobj = MyClass.new\ndef obj.my_singleton_method\n  puts "This is a singleton method."\nend\n')),(0,r.kt)("h3",{id:"metaprogramming-with-define_method"},"Metaprogramming with define_method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class MyClass\n  define_method :dynamic_method do |arg|\n    puts "Dynamic method called with argument: #{arg}"\n  end\nend\nobj = MyClass.new\nobj.dynamic_method("Hello, Metaprogramming!")\n')),(0,r.kt)("h3",{id:"custom-enumerators"},"Custom enumerators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class MyEnumerator\n  include Enumerable\n  def each\n    yield 1\n    yield 2\n    yield 3\n  end\nend\nenum = MyEnumerator.new\nenum.each { |x| puts x }\n")),(0,r.kt)("h3",{id:"memoization-with-hashes"},"Memoization with Hashes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def fibonacci(n, memo = {})\n  return n if n <= 1\n  memo[n] ||= fibonacci(n - 1, memo) + fibonacci(n - 2, memo)\nend\n")),(0,r.kt)("h3",{id:"closures-with-lambdas"},"Closures with Lambdas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def closure_example\n  x = 10\n  lambda { |y| puts x + y }\nend\nclosure = closure_example\nclosure.call(5)\n")),(0,r.kt)("h3",{id:"functional-programming-currying"},"Functional programming (currying)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"add = lambda { |x| lambda { |y| x + y } }\nadd_five = add.call(5)\nresult = add_five.call(3)\n")),(0,r.kt)("h3",{id:"method-chaining"},"Method chaining"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Calculator\n  attr_accessor :value\n  def initialize(value)\n    @value = value\n  end\n  def add(x)\n    @value += x\n    self\n  end\n  def subtract(x)\n    @value -= x\n    self\n  end\nend\nresult = Calculator.new(10).add(5).subtract(3).value\n")),(0,r.kt)("h3",{id:"custom-exceptions-and-error-handling"},"Custom exceptions and error handling"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class CustomException < StandardError\n  def initialize(message)\n    super(message)\n  end\nend\nbegin\n  raise CustomException, "Custom exception occurred."\nrescue CustomException => e\n  puts "Error: #{e.message}"\nend\n')),(0,r.kt)("h3",{id:"asynchronous-programming-with-fibers-fiber-fiberyield"},"Asynchronous Programming with Fibers (Fiber, Fiber.yield)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'fiber = Fiber.new do\n  puts "Fiber started"\n  Fiber.yield\n  puts "Fiber resumed"\nend\nputs "Main started"\nfiber.resume\nputs "Main resumed"\n')),(0,r.kt)("h3",{id:"multithreading-with-threads-and-mutexes"},"Multithreading with Threads and Mutexes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'mutex = Mutex.new\ncounter = 0\nthreads = []\n10.times do\n  threads << Thread.new do\n    mutex.synchronize { counter += 1 }\n  end\nend\nthreads.each(&:join)\nputs "Counter: #{counter}"\n')),(0,r.kt)("h3",{id:"working-with-symbols-1"},"Working with symbols"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\nsquared_numbers = numbers.map(&:**2)\n")),(0,r.kt)("h3",{id:"file-io-with-blocks-fileopen"},"File I/O with Blocks (File.open)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'File.open("example.txt", "r") do |file|\n  content = file.read\nend\n')),(0,r.kt)("h3",{id:"enumerable-methods-reduce-with-symbols"},"Enumerable methods (reduce with symbols)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"numbers = [1, 2, 3, 4, 5]\ntotal = numbers.reduce(:+)\n")),(0,r.kt)("h3",{id:"custom-operators-overloading"},"Custom Operators (Overloading)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"class Complex\n  attr_accessor :real, :imag\n  def initialize(real, imag)\n    @real = real\n    @imag = imag\n  end\n  def +(other)\n    Complex.new(@real + other.real, @imag + other.imag)\n  end\nend\n")),(0,r.kt)("h3",{id:"working-with-sets-setintersection"},"Working with Sets (Set.intersection)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'set'\nset1 = Set.new([1, 2, 3])\nset2 = Set.new([2, 3, 4])\nintersection = set1.intersection(set2)\n")),(0,r.kt)("h3",{id:"working-with-dates-and-times-timezone"},"Working with Dates and Times (Time.zone)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'active_support/time'\nTime.zone = 'Eastern Time (US & Canada)'\ncurrent_time = Time.zone.now\n")),(0,r.kt)("h3",{id:"using-tap-for-method-chaining-and-debugging"},"Using tap for Method Chaining and Debugging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"array = [1, 2, 3]\nresult = array.tap { |a| a << 4 }.map { |x| x * 2 }\n")))}c.isMDXComponent=!0}}]);